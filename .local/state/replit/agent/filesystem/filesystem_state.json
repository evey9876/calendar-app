{"file_contents":{"COMPLETE_CALENDAR_EXPORT.md":{"content":"# Complete Calendar Application Export for Cursor\n\n## Quick Setup Guide\n\n1. **Create project directory**: `mkdir calendar-app && cd calendar-app`\n2. **Copy all files from the sections below**\n3. **Install dependencies**: `npm install`\n4. **Run development server**: `npm run dev`\n5. **Open browser to**: `http://localhost:5000`\n\nYour calendar app will work immediately with local IndexedDB storage - no database setup required!\n\n---\n\n## Core Library Files\n\n### client/src/lib/storage.ts\n```typescript\nimport { openDB, type DBSchema, type IDBPDatabase } from 'idb';\nimport { Event, InsertEvent } from '@shared/schema';\nimport { nanoid } from 'nanoid';\n\ninterface CalendarDB extends DBSchema {\n  events: {\n    key: string;\n    value: Event;\n    indexes: {\n      'by-date': string;\n      'by-type': string;\n    };\n  };\n}\n\nclass CalendarStorage {\n  private db: IDBPDatabase<CalendarDB> | null = null;\n\n  async init() {\n    if (this.db) return this.db;\n\n    this.db = await openDB<CalendarDB>('calendar-db', 1, {\n      upgrade(db) {\n        const eventStore = db.createObjectStore('events', {\n          keyPath: 'id',\n        });\n        eventStore.createIndex('by-date', 'date');\n        eventStore.createIndex('by-type', 'type');\n      },\n    });\n\n    return this.db;\n  }\n\n  async createEvent(eventData: InsertEvent): Promise<Event> {\n    const db = await this.init();\n    const now = new Date().toISOString();\n    const event: Event = {\n      ...eventData,\n      id: nanoid(),\n      createdAt: now,\n      updatedAt: now,\n    };\n\n    await db.add('events', event);\n    return event;\n  }\n\n  async getEvent(id: string): Promise<Event | undefined> {\n    const db = await this.init();\n    return await db.get('events', id);\n  }\n\n  async getAllEvents(): Promise<Event[]> {\n    const db = await this.init();\n    return await db.getAll('events');\n  }\n\n  async updateEvent(id: string, updates: Partial<Event>): Promise<Event> {\n    const db = await this.init();\n    const existing = await db.get('events', id);\n    if (!existing) {\n      throw new Error('Event not found');\n    }\n\n    const updated: Event = {\n      ...existing,\n      ...updates,\n      id,\n      updatedAt: new Date().toISOString(),\n    };\n\n    await db.put('events', updated);\n    return updated;\n  }\n\n  async deleteEvent(id: string): Promise<void> {\n    const db = await this.init();\n    await db.delete('events', id);\n  }\n\n  async exportEvents(): Promise<Event[]> {\n    return await this.getAllEvents();\n  }\n\n  async importEvents(events: Event[]): Promise<void> {\n    const db = await this.init();\n    const tx = db.transaction('events', 'readwrite');\n    \n    for (const event of events) {\n      await tx.store.put(event);\n    }\n    \n    await tx.done;\n  }\n}\n\nexport const storage = new CalendarStorage();\n```\n\n### client/src/lib/utils.ts\n```typescript\nimport { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n```\n\n### client/src/lib/queryClient.ts\n```typescript\nimport { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n```\n\n### client/src/lib/dateParser.ts\n```typescript\nimport { parse } from 'date-fns';\n\nexport function formatDateSafe(date: Date): string {\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const day = date.getDate().toString().padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\nexport interface ParsedEvent {\n  title: string;\n  date: string;\n  endDate?: string;\n  startTime?: string;\n  endTime?: string;\n  type?: 'PLANNING' | 'MEETING' | 'MONTHLY_REVIEW' | 'HOLIDAYS';\n}\n\nexport function parseNaturalLanguage(input: string): ParsedEvent | null {\n  const cleanInput = input.trim().toLowerCase();\n  \n  // Extract event type from common keywords\n  let type: 'PLANNING' | 'MEETING' | 'MONTHLY_REVIEW' | 'HOLIDAYS' | undefined;\n  if (cleanInput.includes('planning') || cleanInput.includes('pi planning')) {\n    type = 'PLANNING';\n  } else if (cleanInput.includes('monthly review') || cleanInput.includes('month review')) {\n    type = 'MONTHLY_REVIEW';\n  } else if (cleanInput.includes('meeting') || cleanInput.includes('standup') || cleanInput.includes('review')) {\n    type = 'MEETING';\n  } else if (cleanInput.includes('holiday') || cleanInput.includes('vacation')) {\n    type = 'HOLIDAYS';\n  }\n\n  // Basic date parsing - extend as needed\n  const today = new Date();\n  let parsedDate: string | null = null;\n  \n  if (cleanInput.includes('today')) {\n    parsedDate = formatDateSafe(today);\n  } else if (cleanInput.includes('tomorrow')) {\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    parsedDate = formatDateSafe(tomorrow);\n  }\n\n  // Extract title (basic implementation)\n  let title = input.replace(/(today|tomorrow)/i, '').trim();\n\n  if (!title || !parsedDate) {\n    return null;\n  }\n\n  return {\n    title,\n    date: parsedDate,\n    type,\n  };\n}\n```\n\n---\n\n## State Management\n\n### client/src/stores/calendarStore.ts\n```typescript\nimport { create } from 'zustand';\nimport { Event, EventType, InsertEvent } from '@shared/schema';\nimport { storage } from '@/lib/storage';\n\ninterface CalendarState {\n  events: Event[];\n  currentDate: Date;\n  viewMode: 'month' | 'week' | 'day';\n  selectedEvent: Event | null;\n  searchQuery: string;\n  filterType: EventType | 'all';\n  isLoading: boolean;\n  error: string | null;\n\n  // Actions\n  setCurrentDate: (date: Date) => void;\n  setViewMode: (mode: 'month' | 'week' | 'day') => void;\n  setSelectedEvent: (event: Event | null) => void;\n  setSearchQuery: (query: string) => void;\n  setFilterType: (type: EventType | 'all') => void;\n  \n  // Event operations\n  loadEvents: () => Promise<void>;\n  createEvent: (event: InsertEvent) => Promise<void>;\n  createEventsBulk: (events: InsertEvent[]) => Promise<void>;\n  updateEvent: (id: string, updates: Partial<Event>) => Promise<void>;\n  deleteEvent: (id: string) => Promise<void>;\n  \n  // Export/Import\n  exportEvents: () => Promise<string>;\n  importEvents: (jsonData: string) => Promise<void>;\n  \n  // Getters\n  getEventsForDate: (date: string) => Event[];\n  getEventsByType: (type: EventType) => Event[];\n  getFilteredEvents: () => Event[];\n  isEventOnDate: (event: Event, date: string) => boolean;\n}\n\nexport const useCalendarStore = create<CalendarState>((set, get) => ({\n  events: [],\n  currentDate: new Date(),\n  viewMode: 'month',\n  selectedEvent: null,\n  searchQuery: '',\n  filterType: 'all',\n  isLoading: false,\n  error: null,\n\n  setCurrentDate: (date) => set({ currentDate: date }),\n  setViewMode: (mode) => set({ viewMode: mode }),\n  setSelectedEvent: (event) => set({ selectedEvent: event }),\n  setSearchQuery: (query) => set({ searchQuery: query }),\n  setFilterType: (type) => set({ filterType: type }),\n\n  loadEvents: async () => {\n    set({ isLoading: true, error: null });\n    try {\n      const events = await storage.getAllEvents();\n      set({ events, isLoading: false });\n    } catch (error) {\n      set({ error: 'Failed to load events', isLoading: false });\n      console.error('Error loading events:', error);\n    }\n  },\n\n  createEvent: async (eventData) => {\n    set({ isLoading: true, error: null });\n    try {\n      const newEvent = await storage.createEvent(eventData);\n      set(state => ({ \n        events: [...state.events, newEvent],\n        isLoading: false \n      }));\n    } catch (error) {\n      set({ error: 'Failed to create event', isLoading: false });\n      console.error('Error creating event:', error);\n      throw error;\n    }\n  },\n\n  createEventsBulk: async (eventDataArray: InsertEvent[]) => {\n    set({ isLoading: true, error: null });\n    try {\n      const newEvents: Event[] = [];\n      for (const eventData of eventDataArray) {\n        const newEvent = await storage.createEvent(eventData);\n        newEvents.push(newEvent);\n      }\n      set(state => ({ \n        events: [...state.events, ...newEvents],\n        isLoading: false \n      }));\n    } catch (error) {\n      set({ error: 'Failed to create events', isLoading: false });\n      console.error('Error creating events:', error);\n      throw error;\n    }\n  },\n\n  updateEvent: async (id, updates) => {\n    set({ isLoading: true, error: null });\n    try {\n      const updatedEvent = await storage.updateEvent(id, updates);\n      set(state => ({\n        events: state.events.map(e => e.id === id ? updatedEvent : e),\n        selectedEvent: state.selectedEvent?.id === id ? updatedEvent : state.selectedEvent,\n        isLoading: false\n      }));\n    } catch (error) {\n      set({ error: 'Failed to update event', isLoading: false });\n      console.error('Error updating event:', error);\n      throw error;\n    }\n  },\n\n  deleteEvent: async (id) => {\n    set({ isLoading: true, error: null });\n    try {\n      await storage.deleteEvent(id);\n      set(state => ({\n        events: state.events.filter(e => e.id !== id),\n        selectedEvent: state.selectedEvent?.id === id ? null : state.selectedEvent,\n        isLoading: false\n      }));\n    } catch (error) {\n      set({ error: 'Failed to delete event', isLoading: false });\n      console.error('Error deleting event:', error);\n      throw error;\n    }\n  },\n\n  exportEvents: async () => {\n    try {\n      const events = await storage.exportEvents();\n      const exportData = {\n        events,\n        exportedAt: new Date().toISOString(),\n        version: '1.0',\n      };\n      return JSON.stringify(exportData, null, 2);\n    } catch (error) {\n      console.error('Error exporting events:', error);\n      throw new Error('Failed to export events');\n    }\n  },\n\n  importEvents: async (jsonData) => {\n    try {\n      const data = JSON.parse(jsonData);\n      if (data.events && Array.isArray(data.events)) {\n        await storage.importEvents(data.events);\n        await get().loadEvents();\n      } else {\n        throw new Error('Invalid import format');\n      }\n    } catch (error) {\n      console.error('Error importing events:', error);\n      throw new Error('Failed to import events');\n    }\n  },\n\n  isEventOnDate: (event, date) => {\n    // Single day event\n    if (!event.endDate) {\n      return event.date === date;\n    }\n    \n    // Multi-day event - check if date falls within range\n    const eventDate = new Date(event.date + 'T00:00:00');\n    const checkDate = new Date(date + 'T00:00:00');\n    const endDate = new Date(event.endDate + 'T00:00:00');\n    return checkDate >= eventDate && checkDate <= endDate;\n  },\n\n  getEventsForDate: (date) => {\n    const { events, isEventOnDate } = get();\n    return events.filter(event => isEventOnDate(event, date));\n  },\n\n  getEventsByType: (type) => {\n    const { events } = get();\n    return events.filter(event => event.type === type);\n  },\n\n  getFilteredEvents: () => {\n    const { events, searchQuery, filterType } = get();\n    let filtered = events;\n\n    if (filterType !== 'all') {\n      filtered = filtered.filter(event => event.type === filterType);\n    }\n\n    if (searchQuery.trim()) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(event =>\n        event.title.toLowerCase().includes(query) ||\n        (event.notes && event.notes.toLowerCase().includes(query))\n      );\n    }\n\n    return filtered;\n  },\n}));\n```\n\n---\n\n## CSS Styles\n\n### client/src/index.css\n```css\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --radius: 1.3rem;\n\n  /* Calendar-specific colors */\n  --planning: hsl(203 76% 10%);      /* #07182D */\n  --meeting: hsl(193 98% 52%);       /* #02C8FF */\n  --holidays: hsl(30 100% 50%);      /* #FF9000 */\n  \n  --gray-50: hsl(0 0% 98%);          /* #FAFAFA */\n  --gray-100: hsl(0 0% 96%);         /* #F5F5F5 */\n  --gray-200: hsl(220 13% 91%);      /* #E5E7EB */\n  --gray-600: hsl(0 0% 40%);         /* #666666 */\n  --gray-800: hsl(0 0% 20%);         /* #333333 */\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background-color: hsl(var(--gray-50));\n  }\n}\n\n/* Calendar-specific utility classes */\n.event-planning {\n  background-color: hsl(var(--planning));\n}\n\n.event-meeting {\n  background-color: hsl(var(--meeting));\n}\n\n.event-holidays {\n  background-color: hsl(var(--holidays));\n}\n```\n\n---\n\n## Key Features Included\n\n### 🎯 **Core Functionality**\n- **Natural Language Input**: \"Meeting with John tomorrow at 2pm\"\n- **Drag & Drop Events**: Move events between dates\n- **Multi-day Events**: Support for date ranges\n- **Event Categories**: Planning, Meeting, Monthly Review, Holidays\n- **Local Storage**: Privacy-first IndexedDB storage\n\n### 📅 **Quarterly Calendar**\n- **Custom Quarters**: Q1 (Aug-Oct), Q2 (Nov-Jan), Q3 (Feb-Apr), Q4 (May-Jul)\n- **Weekdays Only**: Monday-Friday business focus\n- **Color-coded Events**: Visual categorization\n\n### 🔄 **Data Management**\n- **Bulk Import**: Paste multiple events at once\n- **JSON Export/Import**: Complete data backup\n- **PowerPoint Export**: Professional presentation formats\n- **Event Search & Filtering**: Find events quickly\n\n### 👥 **Access Modes**\n- **Editor Mode**: Full event management capabilities\n- **Viewer Mode**: Read-only access for stakeholders\n\n### 🎨 **Technical Stack**\n- **Frontend**: React 18 + TypeScript + Vite\n- **State**: Zustand + TanStack Query  \n- **UI**: Shadcn/ui + Tailwind CSS\n- **Backend**: Express.js (minimal, for development)\n- **Storage**: IndexedDB (local-first)\n\n---\n\n## Next Steps for Cursor\n\n1. **Create the directory structure** as shown above\n2. **Copy configuration files** (package.json, tsconfig.json, etc.)\n3. **Add the library files** (storage, utils, dateParser, queryClient)\n4. **Create the state management** (calendarStore.ts)  \n5. **Add the CSS styling** (index.css)\n6. **Install dependencies**: `npm install`\n7. **Start development**: `npm run dev`\n\nThe application will run immediately with full functionality using local browser storage. No external database or API keys required!\n\nYour calendar app includes professional features like PowerPoint export, natural language parsing, and dual access modes - perfect for organizational planning.","size_bytes":15460},"COMPLETE_SOURCE_CODE.md":{"content":"# Complete Calendar Application Source Code Export\n\n## Project Structure\n```\ncalendar-app/\n├── package.json\n├── tsconfig.json\n├── vite.config.ts\n├── tailwind.config.ts\n├── postcss.config.js\n├── components.json\n├── drizzle.config.ts\n├── client/\n│   ├── index.html\n│   └── src/\n│       ├── main.tsx\n│       ├── App.tsx\n│       ├── index.css\n│       ├── stores/calendarStore.ts\n│       ├── lib/\n│       ├── components/\n│       ├── pages/\n│       ├── hooks/\n│       ├── constants/\n│       └── utils/\n├── server/\n│   ├── index.ts\n│   ├── routes.ts\n│   ├── storage.ts\n│   └── vite.ts\n└── shared/\n    └── schema.ts\n```\n\n---\n\n## Configuration Files\n\n### package.json\n```json\n{\n  \"name\": \"calendar-app\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"dev\": \"NODE_ENV=development tsx server/index.ts\",\n    \"build\": \"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\",\n    \"start\": \"NODE_ENV=production node dist/index.js\",\n    \"check\": \"tsc\"\n  },\n  \"dependencies\": {\n    \"@dnd-kit/core\": \"^6.3.1\",\n    \"@dnd-kit/sortable\": \"^10.0.0\",\n    \"@dnd-kit/utilities\": \"^3.2.2\",\n    \"@hookform/resolvers\": \"^3.10.0\",\n    \"@radix-ui/react-dialog\": \"^1.1.7\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.7\",\n    \"@radix-ui/react-popover\": \"^1.1.7\",\n    \"@radix-ui/react-select\": \"^2.1.7\",\n    \"@radix-ui/react-slot\": \"^1.2.0\",\n    \"@radix-ui/react-toast\": \"^1.2.7\",\n    \"@radix-ui/react-tooltip\": \"^1.2.0\",\n    \"@tanstack/react-query\": \"^5.60.5\",\n    \"chrono-node\": \"^2.8.4\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"date-fns\": \"^3.6.0\",\n    \"express\": \"^4.21.2\",\n    \"framer-motion\": \"^11.13.1\",\n    \"idb\": \"^8.0.3\",\n    \"lucide-react\": \"^0.453.0\",\n    \"pptxgenjs\": \"^4.0.1\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-hook-form\": \"^7.55.0\",\n    \"tailwind-merge\": \"^2.6.0\",\n    \"wouter\": \"^3.3.5\",\n    \"zod\": \"^3.24.2\",\n    \"zustand\": \"^5.0.7\"\n  },\n  \"devDependencies\": {\n    \"@types/express\": \"4.17.21\",\n    \"@types/node\": \"20.16.11\",\n    \"@types/react\": \"^18.3.11\",\n    \"@types/react-dom\": \"^18.3.1\",\n    \"@vitejs/plugin-react\": \"^4.3.2\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"esbuild\": \"^0.25.0\",\n    \"postcss\": \"^8.4.47\",\n    \"tailwindcss\": \"^3.4.17\",\n    \"tsx\": \"^4.19.1\",\n    \"typescript\": \"5.6.3\",\n    \"vite\": \"^5.4.19\"\n  }\n}\n```\n\n### tsconfig.json\n```json\n{\n  \"include\": [\"client/src/**/*\", \"shared/**/*\", \"server/**/*\"],\n  \"exclude\": [\"node_modules\", \"build\", \"dist\", \"**/*.test.ts\"],\n  \"compilerOptions\": {\n    \"incremental\": true,\n    \"tsBuildInfoFile\": \"./node_modules/typescript/tsbuildinfo\",\n    \"noEmit\": true,\n    \"module\": \"ESNext\",\n    \"strict\": true,\n    \"lib\": [\"esnext\", \"dom\", \"dom.iterable\"],\n    \"jsx\": \"preserve\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"allowImportingTsExtensions\": true,\n    \"moduleResolution\": \"bundler\",\n    \"baseUrl\": \".\",\n    \"types\": [\"node\", \"vite/client\"],\n    \"paths\": {\n      \"@/*\": [\"./client/src/*\"],\n      \"@shared/*\": [\"./shared/*\"]\n    }\n  }\n}\n```\n\n### vite.config.ts\n```typescript\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n```\n\n### tailwind.config.ts\n```typescript\nimport type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        // Calendar-specific colors\n        planning: \"var(--planning)\",\n        meeting: \"var(--meeting)\",\n        holidays: \"var(--holidays)\",\n      },\n      fontFamily: {\n        inter: ['Inter', 'sans-serif'],\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n```\n\n### postcss.config.js\n```javascript\nexport default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n```\n\n### components.json\n```json\n{\n    \"$schema\": \"https://ui.shadcn.com/schema.json\",\n    \"style\": \"new-york\",\n    \"rsc\": false,\n    \"tsx\": true,\n    \"tailwind\": {\n      \"config\": \"tailwind.config.ts\",\n      \"css\": \"client/src/index.css\",\n      \"baseColor\": \"neutral\",\n      \"cssVariables\": true,\n      \"prefix\": \"\"\n    },\n    \"aliases\": {\n      \"components\": \"@/components\",\n      \"utils\": \"@/lib/utils\",\n      \"ui\": \"@/components/ui\",\n      \"lib\": \"@/lib\",\n      \"hooks\": \"@/hooks\"\n    }\n}\n```\n\n---\n\n## Shared Schema\n\n### shared/schema.ts\n```typescript\nimport { z } from \"zod\";\n\nexport const eventTypeSchema = z.enum([\"PLANNING\", \"MEETING\", \"MONTHLY_REVIEW\", \"HOLIDAYS\"]);\n\nexport const eventSchema = z.object({\n  id: z.string(),\n  title: z.string().min(1, \"Title is required\"),\n  type: eventTypeSchema,\n  date: z.string(), // ISO date string (start date)\n  endDate: z.string().optional(), // ISO date string (end date for multi-day events)\n  startTime: z.string().optional(), // HH:MM format\n  endTime: z.string().optional(), // HH:MM format\n  notes: z.string().optional(),\n  createdAt: z.string(), // ISO date string\n  updatedAt: z.string(), // ISO date string\n});\n\nexport type Event = z.infer<typeof eventSchema>;\nexport type EventType = z.infer<typeof eventTypeSchema>;\nexport type InsertEvent = Omit<Event, 'id' | 'createdAt' | 'updatedAt'>;\n\nexport const createEventSchema = eventSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).refine((data) => {\n  if (data.endDate && data.date) {\n    return new Date(data.endDate) >= new Date(data.date);\n  }\n  return true;\n}, {\n  message: \"End date must be on or after start date\",\n  path: [\"endDate\"],\n});\n\nexport const updateEventSchema = eventSchema.partial().required({ id: true });\n\nexport const exportDataSchema = z.object({\n  events: z.array(eventSchema),\n  exportedAt: z.string(),\n  version: z.string(),\n});\n\nexport type ExportData = z.infer<typeof exportDataSchema>;\n```\n\n---\n\n## Server Code\n\n### server/index.ts\n```typescript\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n```\n\n### server/routes.ts\n```typescript\nimport type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // API routes can be added here if needed for server-side functionality\n  // Currently the app uses local IndexedDB storage\n  \n  const httpServer = createServer(app);\n  return httpServer;\n}\n```\n\n### server/storage.ts\n```typescript\n// This file is kept for potential future server-side storage\n// Currently the app uses client-side IndexedDB storage\nexport interface IStorage {\n  // Future server storage interface\n}\n\nexport class MemStorage implements IStorage {\n  constructor() {\n    // Implementation would go here\n  }\n}\n\nexport const storage = new MemStorage();\n```\n\n### server/vite.ts\n```typescript\nimport express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: viteLogger,\n    server: {\n      middlewareMode: true,\n      hmr: { server },\n      allowedHosts: true as const,\n    },\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n```\n\n---\n\n## Client HTML Entry Point\n\n### client/index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1\" />\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\n    <title>Calendar App</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n```\n\n---\n\n## Client Application Code\n\n### client/src/main.tsx\n```typescript\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n```\n\n### client/src/App.tsx\n```typescript\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport CalendarPage from \"@/pages/CalendarPage\";\nimport CalendarViewerPage from \"@/pages/CalendarViewerPage\";\nimport NotFound from \"@/pages/not-found\";\nimport { useCalendarStore } from \"@/stores/calendarStore\";\n\n// Expose store to window for console access\nif (typeof window !== 'undefined') {\n  (window as any).useCalendarStore = useCalendarStore;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={CalendarPage} />\n      <Route path=\"/viewer\" component={CalendarViewerPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n```\n\n---\n\n## Setup Instructions for Cursor\n\n1. **Create new project folder**: `mkdir calendar-app && cd calendar-app`\n\n2. **Copy all files**: Create the directory structure and copy the code from each section above\n\n3. **Install dependencies**: `npm install`\n\n4. **Start development**: `npm run dev`\n\n5. **Important Note**: This application uses **IndexedDB for local storage** - no database setup required!\n\nThe app will run at `http://localhost:5000` and includes:\n- Natural language event parsing\n- Drag-and-drop functionality  \n- PowerPoint export\n- Dual editor/viewer modes\n- Quarterly calendar view\n- Local-first privacy approach\n\nAll data is stored locally in your browser's IndexedDB for complete privacy.\n\n---\n\n*Continue reading the remaining components in separate files...*","size_bytes":13937},"CURSOR_SETUP.md":{"content":"# Calendar Application - Cursor Setup Guide\n\n## Project Overview\nA privacy-first TypeScript calendar application with advanced event management, natural language input, drag-and-drop functionality, and PowerPoint export capabilities.\n\n## Features\n- Natural language event input (\"Meeting with John next Monday at 2pm\")\n- Drag-and-drop event management\n- Multi-day event support\n- Quarterly view system (Q1: Aug-Oct, Q2: Nov-Jan, Q3: Feb-Apr, Q4: May-Jul)\n- Business-focused weekday display (Mon-Fri)\n- Local IndexedDB storage for privacy\n- PowerPoint export with multiple formats\n- Dual-mode access: Editor and Read-only Viewer\n- Bulk import with text parsing\n\n## Tech Stack\n- **Frontend**: React 18 + TypeScript + Vite\n- **State Management**: Zustand + TanStack Query\n- **UI**: Shadcn/ui + Radix UI + Tailwind CSS\n- **Backend**: Express.js + TypeScript\n- **Storage**: Local IndexedDB (idb library)\n- **Drag & Drop**: DND Kit\n- **Date Parsing**: chrono-node + date-fns\n- **Document Export**: pptxgenjs\n\n## Quick Setup for Cursor\n\n### 1. Create New Project\n```bash\nmkdir calendar-app\ncd calendar-app\n```\n\n### 2. Initialize Package.json\nCopy the package.json from the file listing below and run:\n```bash\nnpm install\n```\n\n### 3. Project Structure\nCreate the following directory structure:\n```\ncalendar-app/\n├── client/\n│   ├── index.html\n│   └── src/\n│       ├── components/\n│       ├── lib/\n│       ├── hooks/\n│       ├── pages/\n│       ├── stores/\n│       ├── utils/\n│       ├── constants/\n│       ├── App.tsx\n│       ├── main.tsx\n│       └── index.css\n├── server/\n│   ├── index.ts\n│   ├── routes.ts\n│   ├── storage.ts\n│   └── vite.ts\n├── shared/\n│   └── schema.ts\n├── package.json\n├── tsconfig.json\n├── vite.config.ts\n├── tailwind.config.ts\n├── postcss.config.js\n├── components.json\n└── drizzle.config.ts\n```\n\n### 4. Development Commands\n```bash\n# Start development server\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Start production server\nnpm start\n\n# Type checking\nnpm run check\n```\n\n## Key Configuration Files\n\n### package.json\n```json\n{\n  \"name\": \"rest-express\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"dev\": \"NODE_ENV=development tsx server/index.ts\",\n    \"build\": \"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\",\n    \"start\": \"NODE_ENV=production node dist/index.js\",\n    \"check\": \"tsc\",\n    \"db:push\": \"drizzle-kit push\"\n  },\n  \"dependencies\": {\n    \"@dnd-kit/core\": \"^6.3.1\",\n    \"@dnd-kit/sortable\": \"^10.0.0\",\n    \"@dnd-kit/utilities\": \"^3.2.2\",\n    \"@hookform/resolvers\": \"^3.10.0\",\n    \"@radix-ui/react-dialog\": \"^1.1.7\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.7\",\n    \"@radix-ui/react-popover\": \"^1.1.7\",\n    \"@radix-ui/react-select\": \"^2.1.7\",\n    \"@tanstack/react-query\": \"^5.60.5\",\n    \"chrono-node\": \"^2.8.4\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"date-fns\": \"^3.6.0\",\n    \"express\": \"^4.21.2\",\n    \"framer-motion\": \"^11.13.1\",\n    \"idb\": \"^8.0.3\",\n    \"lucide-react\": \"^0.453.0\",\n    \"pptxgenjs\": \"^4.0.1\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-hook-form\": \"^7.55.0\",\n    \"tailwind-merge\": \"^2.6.0\",\n    \"wouter\": \"^3.3.5\",\n    \"zod\": \"^3.24.2\",\n    \"zustand\": \"^5.0.7\"\n  },\n  \"devDependencies\": {\n    \"@types/express\": \"4.17.21\",\n    \"@types/node\": \"20.16.11\",\n    \"@types/react\": \"^18.3.11\",\n    \"@types/react-dom\": \"^18.3.1\",\n    \"@vitejs/plugin-react\": \"^4.3.2\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"esbuild\": \"^0.25.0\",\n    \"postcss\": \"^8.4.47\",\n    \"tailwindcss\": \"^3.4.17\",\n    \"tsx\": \"^4.19.1\",\n    \"typescript\": \"5.6.3\",\n    \"vite\": \"^5.4.19\"\n  }\n}\n```\n\n### tsconfig.json\n```json\n{\n  \"include\": [\"client/src/**/*\", \"shared/**/*\", \"server/**/*\"],\n  \"exclude\": [\"node_modules\", \"build\", \"dist\", \"**/*.test.ts\"],\n  \"compilerOptions\": {\n    \"incremental\": true,\n    \"tsBuildInfoFile\": \"./node_modules/typescript/tsbuildinfo\",\n    \"noEmit\": true,\n    \"module\": \"ESNext\",\n    \"strict\": true,\n    \"lib\": [\"esnext\", \"dom\", \"dom.iterable\"],\n    \"jsx\": \"preserve\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"allowImportingTsExtensions\": true,\n    \"moduleResolution\": \"bundler\",\n    \"baseUrl\": \".\",\n    \"types\": [\"node\", \"vite/client\"],\n    \"paths\": {\n      \"@/*\": [\"./client/src/*\"],\n      \"@shared/*\": [\"./shared/*\"]\n    }\n  }\n}\n```\n\n### vite.config.ts\n```typescript\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n```\n\n## Important Notes for Cursor\n\n1. **No Database Setup Required**: Uses IndexedDB for local storage\n2. **Port Configuration**: Development server runs on port 5000\n3. **Path Aliases**: Uses `@/` for client src and `@shared/` for shared schemas\n4. **Environment**: Remove Replit-specific plugins from vite.config.ts\n5. **Styling**: Uses Tailwind CSS with custom color variables\n6. **Forms**: Uses react-hook-form with Zod validation\n\n## Key Features Implementation\n\n### Event Types with Colors\n- Planning: Dark blue (#07182D)\n- Meeting: Light blue (#02C8FF)\n- Monthly Review: Pink (#FF007F)  \n- Holidays: Orange (#FF9000)\n\n### Natural Language Parsing\nUses chrono-node library to parse phrases like:\n- \"Meeting tomorrow at 2pm\"\n- \"Conference next Monday to Wednesday\"\n- \"Review session Friday afternoon\"\n\n### Storage Architecture\n- **Primary**: IndexedDB for offline-first approach\n- **Export**: JSON backup and PowerPoint presentations\n- **State**: Zustand store with persistence\n\n### Quarterly Calendar System\nCustom quarterly view:\n- Q1: August - October\n- Q2: November - January  \n- Q3: February - April\n- Q4: May - July\n\n## Next Steps After Setup\n\n1. Copy all source files from the file listings below\n2. Install dependencies: `npm install`\n3. Start development server: `npm run dev`\n4. Open browser to `http://localhost:5000`\n5. Begin customizing for your needs\n\nThe application will work immediately with local storage - no database setup required!","size_bytes":6510},"PRD.md":{"content":"# Product Requirements Document (PRD)\n## Online Calendar - Quarterly Planning Application\n\n**Version**: 1.0  \n**Date**: August 19, 2025  \n**Status**: Completed MVP  \n\n---\n\n## 1. Executive Summary\n\n### 1.1 Product Overview\nAn online calendar application designed specifically for organizational planning using a custom quarterly view system. The application prioritizes privacy by storing all data locally in the browser while providing intuitive event management through natural language input and drag-and-drop functionality.\n\n### 1.2 Business Objectives\n- Provide a privacy-first alternative to cloud-based calendar solutions\n- Enable efficient quarterly planning for organizations and individuals\n- Reduce cognitive load through natural language event creation\n- Ensure complete user data ownership and control\n\n### 1.3 Success Metrics\n- User can create events using natural language in under 10 seconds\n- 100% data privacy (no external server communication)\n- Drag-and-drop operations complete in under 2 seconds\n- Zero data loss with local storage persistence\n\n---\n\n## 2. Product Vision & Strategy\n\n### 2.1 Vision Statement\n\"Empower organizations to plan effectively while maintaining complete control over their calendar data through an intuitive, privacy-first quarterly planning system.\"\n\n### 2.2 Target Users\n\n**Primary Users:**\n- Project managers and team leads\n- Organizations using quarterly planning cycles\n- Privacy-conscious individuals and teams\n- Remote teams needing shared planning visibility\n\n**User Personas:**\n- **Sarah, Project Manager**: Needs to visualize quarterly milestones and team commitments\n- **Tech Team Lead**: Requires sprint planning alignment with quarterly objectives\n- **Privacy-Conscious User**: Wants calendar functionality without data sharing concerns\n\n### 2.3 Competitive Advantage\n- **Unique Quarterly System**: Custom Q1-Q4 aligned with fiscal/planning cycles\n- **Complete Privacy**: No cloud dependency or data collection\n- **Natural Language**: Intuitive event creation without complex forms\n- **Immediate Usability**: No accounts, setup, or configuration required\n\n---\n\n## 3. Product Requirements\n\n### 3.1 Functional Requirements\n\n#### 3.1.1 Calendar View System\n**FR-001: Quarterly Display**\n- Display three months simultaneously in quarterly groupings\n- Q1: August, September, October\n- Q2: November, December, January\n- Q3: February, March, April\n- Q4: May, June, July\n\n**FR-002: Navigation Controls**\n- Quarter selector dropdown (Q1, Q2, Q3, Q4)\n- Previous/Next quarter arrow buttons\n- \"Today\" button to return to current quarter\n- Visual indication of current quarter\n\n#### 3.1.2 Event Management\n**FR-003: Event Creation**\n- Natural language input parser supporting:\n  - Date formats: \"Sep 15\", \"tomorrow\", \"Dec 25\"\n  - Time ranges: \"2-4pm\", \"9:00-11:30\"\n  - Event types: auto-detection of Planning, Meeting, Holiday keywords\n- Manual form entry with date/time pickers\n- Three predefined event types with color coding\n\n**FR-004: Event Interaction**\n- Click to view event details\n- Edit event properties (title, type, date, time, notes)\n- Delete events with confirmation\n- Visual feedback for all interactions\n\n**FR-005: Drag and Drop**\n- Drag events between any calendar dates\n- Visual feedback during drag operations\n- Drop zone highlighting\n- Cross-month dragging support\n- Automatic date updates on successful drops\n\n#### 3.1.3 Data Management\n**FR-006: Local Storage**\n- All data stored in browser's IndexedDB\n- Automatic persistence of all changes\n- No external API calls or data transmission\n- Offline functionality\n\n**FR-007: Import/Export**\n- Export all events to JSON format\n- Import events from JSON backup files\n- Data validation during import\n- Merge or replace options\n\n**FR-008: PowerPoint Export System**\n- Table Format: Monthly tables with date, type, and color-coded event titles\n- Monthly Grid: Traditional calendar grids with event chips for visual planning\n- Quarterly Grid: Compact 3-month overview slides for executive presentations\n- Operating Year Coverage: All formats span August 2025 - July 2026 planning cycle\n- Color-coded presentations using exact event type colors\n- Professional formatting suitable for meetings and reporting\n\n#### 3.1.4 Search and Filtering\n**FR-009: Event Discovery**\n- Filter events by type (Planning, Meeting, Holidays, Monthly Review)\n- Search events by title or content\n- Visual event count display\n- Real-time filter updates\n\n### 3.2 Non-Functional Requirements\n\n#### 3.2.1 Performance\n**NFR-001: Response Time**\n- Event creation: < 500ms\n- Drag and drop: < 200ms\n- Quarter navigation: < 300ms\n- Initial load: < 2 seconds\n\n#### 3.2.2 Usability\n**NFR-002: User Experience**\n- Intuitive interface requiring no training\n- Responsive design for desktop and mobile\n- Accessibility compliance (keyboard navigation, screen readers)\n- Clear visual hierarchy and feedback\n\n#### 3.2.3 Privacy & Security\n**NFR-003: Data Protection**\n- Zero external data transmission\n- No user tracking or analytics\n- No account creation required\n- Complete user data ownership\n\n#### 3.2.4 Compatibility\n**NFR-004: Browser Support**\n- Modern browsers with IndexedDB support\n- Chrome 80+, Firefox 75+, Safari 13+, Edge 80+\n- Mobile browser support (iOS Safari, Chrome Mobile)\n\n---\n\n## 4. Technical Architecture\n\n### 4.1 Frontend Stack\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for development and production builds\n- **Styling**: Tailwind CSS with Shadcn/ui components\n- **State Management**: Zustand for client-side state\n- **Date Handling**: date-fns library\n- **Drag & Drop**: @dnd-kit for accessibility-compliant interactions\n\n### 4.2 Backend Services\n- **Development Server**: Express.js with TypeScript\n- **Storage**: IndexedDB via idb library wrapper\n- **Validation**: Zod schemas for type safety\n- **API Layer**: RESTful design for potential future extensions\n\n### 4.3 Data Schema\n```typescript\ninterface Event {\n  id: string;\n  title: string;\n  type: 'PLANNING' | 'MEETING' | 'HOLIDAYS' | 'MONTHLY_REVIEW';\n  date: string; // YYYY-MM-DD format\n  startTime?: string; // HH:MM format\n  endTime?: string; // HH:MM format\n  notes?: string;\n}\n```\n\n### 4.4 Storage Architecture\n- **Primary**: Browser IndexedDB for persistence\n- **Backup**: JSON export for user-controlled backups\n- **Schema**: Versioned data structure for future migrations\n\n---\n\n## 5. User Experience Design\n\n### 5.1 Interface Layout\n**Header Section:**\n- Quarter selector (Q1-Q4 dropdown)\n- Current quarter display with date range\n- Navigation controls (previous, today, next)\n- Event count indicator\n\n**Main Calendar:**\n- Three-month grid layout\n- Color-coded event cards\n- Drag handles and drop zones\n- Empty state messaging\n\n**Sidebar:**\n- Event type filters\n- Search functionality\n- Quick actions (export, import)\n- Help information\n\n### 5.2 Interaction Patterns\n**Event Creation:**\n1. Click \"+\" button or empty date cell\n2. Type natural language description\n3. System parses and populates form\n4. Confirm or modify details\n5. Save with visual feedback\n\n**Event Management:**\n1. Click event to view details\n2. Edit in modal dialog\n3. Save changes with persistence\n4. Delete with confirmation prompt\n\n### 5.3 Visual Design\n**Color Scheme:**\n- Planning: #07182D (Dark Blue)\n- Meeting: #02C8FF (Light Blue) \n- Monthly Review: #FF007F (Magenta)\n- Holidays: #FF9000 (Orange)\n- UI: Gray scale with blue accents\n\n**Typography:**\n- Headers: Bold, clear hierarchy\n- Body: Readable font sizes\n- Event text: Condensed for calendar view\n\n---\n\n## 6. Implementation Timeline\n\n### 6.1 Completed Features (MVP)\n✅ **Core Calendar System**\n- Quarterly view implementation\n- Date navigation and display\n- Month/week/day grid layouts\n\n✅ **Event Management**\n- CRUD operations for events\n- Natural language parsing\n- Event type categorization\n\n✅ **User Interface**\n- Responsive design implementation\n- Drag and drop functionality\n- Modal dialogs and forms\n\n✅ **Data Layer**\n- IndexedDB integration\n- Local storage persistence\n- JSON import/export functionality\n- PowerPoint export system with three presentation formats\n\n### 6.2 Future Enhancements\n🔄 **Phase 2 (Future)**\n- Recurring events support\n- Advanced search capabilities\n- Custom event types\n- Team collaboration features\n\n🔄 **Phase 3 (Future)**\n- Mobile application\n- Calendar synchronization options\n- Advanced reporting and analytics\n- API for third-party integrations\n\n---\n\n## 7. Quality Assurance\n\n### 7.1 Testing Strategy\n**Unit Testing:**\n- Component functionality tests\n- Date parser validation\n- Storage operation tests\n\n**Integration Testing:**\n- Drag and drop workflows\n- Data persistence verification\n- Cross-browser compatibility\n\n**User Acceptance Testing:**\n- Natural language input accuracy\n- Quarterly navigation usability\n- Data export/import reliability\n\n### 7.2 Success Criteria\n- Natural language parsing accuracy > 95%\n- Zero data loss in normal usage\n- Responsive performance across devices\n- Intuitive user experience requiring no documentation\n\n---\n\n## 8. Risk Assessment\n\n### 8.1 Technical Risks\n**Browser Storage Limitations:**\n- *Risk*: IndexedDB size limits or corruption\n- *Mitigation*: Regular export reminders, data validation\n\n**Performance Degradation:**\n- *Risk*: Slow performance with large datasets\n- *Mitigation*: Virtualization, data pagination\n\n### 8.2 User Experience Risks\n**Natural Language Parsing:**\n- *Risk*: Misinterpretation of user input\n- *Mitigation*: Clear feedback, easy correction methods\n\n**Data Loss Concerns:**\n- *Risk*: User anxiety about local-only storage\n- *Mitigation*: Export education, backup reminders\n\n---\n\n## 9. Success Metrics & KPIs\n\n### 9.1 User Engagement\n- Events created per session\n- Quarter navigation frequency\n- Feature adoption rates\n\n### 9.2 Performance Metrics\n- Application load time\n- Event creation speed\n- Drag and drop responsiveness\n\n### 9.3 Privacy Compliance\n- Zero external API calls\n- No user data collection\n- Complete offline functionality\n\n---\n\n## 10. Conclusion\n\nThe Online Calendar Quarterly Planning Application successfully delivers a privacy-first calendar solution with unique organizational features. The MVP implementation provides all core functionality while maintaining the flexibility for future enhancements based on user feedback and evolving requirements.\n\nThe application's focus on quarterly planning, natural language input, and complete data privacy creates a differentiated product in the calendar application space, specifically targeting users and organizations that prioritize data control and planning efficiency.\n\n---\n\n**Document Owner**: Development Team  \n**Stakeholders**: Product Management, Engineering, Design  \n**Next Review**: Future feature planning phase","size_bytes":10717},"README.md":{"content":"# Online Calendar - Quarterly Planning Application\n\nA privacy-first calendar application designed for organizational planning with a unique quarterly view system. Built with React, TypeScript, and local storage for complete data privacy.\n\n## 🎯 Key Features\n\n### Quarterly View System\n- **Q1**: August - October (Aug, Sep, Oct)\n- **Q2**: November - January (Nov, Dec, Jan)\n- **Q3**: February - April (Feb, Mar, Apr)\n- **Q4**: May - July (May, Jun, Jul)\n\n### Core Functionality\n- **Natural Language Input**: Create events using phrases like \"Team Meeting on Nov 15 2-4pm\"\n- **Drag & Drop**: Move events between dates with visual feedback\n- **Four Event Types**: Planning, Meeting, Monthly Review, Holidays (color-coded)\n- **Local Storage**: All data stored in browser's IndexedDB for privacy\n- **Export/Import**: JSON backup and restore capabilities\n- **PowerPoint Export**: Three professional presentation formats for planning meetings\n- **Search & Filter**: Find events by title, type, or date range\n\n### Privacy & Data\n- **100% Local**: No data sent to external servers\n- **Offline Capable**: Works without internet connection\n- **Export Control**: You own and control all your data\n\n## 🚀 Getting Started\n\n### Prerequisites\n- Node.js 18+ \n- npm or yarn\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone <your-repo-url>\ncd online-calendar\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Start the development server:\n```bash\nnpm run dev\n```\n\n4. Open [http://localhost:5000](http://localhost:5000) in your browser\n\n## 🏗️ Technology Stack\n\n### Frontend\n- **React 18** with TypeScript\n- **Vite** for development and building\n- **Tailwind CSS** for styling\n- **Shadcn/ui** component library\n- **@dnd-kit** for drag and drop functionality\n- **date-fns** for date manipulation\n- **Zustand** for state management\n- **PptxGenJS** for PowerPoint generation\n\n### Backend\n- **Express.js** with TypeScript\n- **IndexedDB** for local data storage\n- **Zod** for data validation\n\n### Development Tools\n- **TypeScript** for type safety\n- **ESLint** for code quality\n- **Hot Module Replacement** for fast development\n\n## 📅 Using the Calendar\n\n### Creating Events\n\n1. **Quick Add**: Click the \"+\" button and type naturally:\n   - \"Planning session on Sep 15 9-11am\"\n   - \"Holiday on Dec 25\"\n   - \"QBR meeting tomorrow 2pm\"\n   - \"Monthly review on Aug 30\"\n\n2. **Manual Form**: Use the detailed form for precise event creation\n\n### Navigation\n\n- **Quarter Selector**: Use the dropdown (Q1-Q4) for quick navigation\n- **Arrow Buttons**: Move between quarters\n- **Today Button**: Jump to current quarter\n\n### Managing Events\n\n- **Drag & Drop**: Click and drag events to new dates\n- **Edit**: Click on any event to view/edit details\n- **Delete**: Remove events from the detail view\n- **Filter**: Use sidebar filters by event type\n\n### Data Management\n\n- **JSON Export**: Download all events as JSON backup\n- **JSON Import**: Upload JSON backup to restore events\n- **PowerPoint Export**: Generate professional presentations in three formats:\n  - **Table Format**: Clean monthly tables with color-coded events\n  - **Monthly Grid**: Traditional calendar view with event blocks\n  - **Quarterly Grid**: 3-month overview slides for executive presentations\n- **Local Storage**: Data persists in your browser\n\n## 🎨 Event Types & Colors\n\n| Type | Color | Use Case |\n|------|-------|----------|\n| Planning | Dark Blue (#07182D) | Strategic planning, roadmaps |\n| Meeting | Light Blue (#02C8FF) | Team meetings, standups, reviews |\n| Monthly Review | Magenta (#FF007F) | Monthly retrospectives, reviews |\n| Holidays | Orange (#FF9000) | Vacations, company holidays |\n\n## 🔧 Configuration\n\nThe calendar uses a custom quarterly system designed for organizational planning. You can modify the quarter definitions in `client/src/components/Calendar.tsx`:\n\n```typescript\nconst getQuarterMonths = (date: Date) => {\n  const month = date.getMonth();\n  \n  // Q1: Aug(7) - Oct(9)\n  if (month >= 7 && month <= 9) return [7, 8, 9];\n  // Q2: Nov(10) - Jan(0)\n  else if (month >= 10 || month <= 0) return [10, 11, 0];\n  // Q3: Feb(1) - Apr(3)\n  else if (month >= 1 && month <= 3) return [1, 2, 3];\n  // Q4: May(4) - Jul(6)\n  else return [4, 5, 6];\n};\n```\n\n## 📱 Responsive Design\n\n- **Desktop**: Full three-month quarterly view\n- **Mobile**: Optimized single-column layout\n- **Touch Support**: Drag and drop works on touch devices\n\n## 🔒 Privacy & Security\n\n- **No External APIs**: All data processing happens locally\n- **No Analytics**: No tracking or data collection\n- **No Account Required**: Start using immediately\n- **Data Ownership**: Export your data anytime\n\n## 🛠️ Development\n\n### Project Structure\n```\n├── client/src/\n│   ├── components/     # React components\n│   ├── stores/         # Zustand state management\n│   ├── lib/           # Utilities and helpers\n│   └── pages/         # Application pages\n├── server/            # Express backend\n├── shared/            # Shared TypeScript schemas\n└── components.json    # Shadcn/ui configuration\n```\n\n### Available Scripts\n\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm run preview` - Preview production build\n- `npm run lint` - Run ESLint\n\n### Adding Features\n\n1. **New Event Types**: Update `shared/schema.ts` and add colors\n2. **Custom Views**: Modify quarter logic in Calendar component\n3. **New Filters**: Extend the sidebar filter system\n4. **Storage Options**: Implement additional storage backends\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch: `git checkout -b feature-name`\n3. Make your changes and test thoroughly\n4. Commit with clear messages: `git commit -m \"Add feature description\"`\n5. Push to your fork: `git push origin feature-name`\n6. Create a Pull Request\n\n## 📄 License\n\nThis project is open source and available under the [MIT License](LICENSE).\n\n## 🙋‍♂️ Support\n\n- **Issues**: Report bugs or request features via GitHub Issues\n- **Documentation**: Check this README and inline code comments\n- **Examples**: See the demo data for usage patterns\n\n## 🚧 Roadmap\n\n- [x] PowerPoint export with multiple formats\n- [x] Monthly Review event type\n- [x] Enhanced presentation capabilities\n- [ ] Recurring events support\n- [ ] Calendar sync (optional)\n- [ ] Team collaboration features\n- [ ] Advanced filtering options\n- [ ] Mobile app version\n- [ ] Custom quarter definitions UI\n\n---\n\n**Built for organizational planning with privacy in mind.** 🗓️","size_bytes":6563},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Online Calendar\n\n## Overview\n\nA local-first online calendar application designed for organizational planning. The application allows users to quickly add events using natural language input, manage them via drag-and-drop functionality, and view them in color-coded categories. All data is stored locally in the browser's IndexedDB for offline functionality, with comprehensive export capabilities including JSON backup and professional PowerPoint presentations in multiple formats.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nMulti-day events: No start/end times displayed. No calendar icon or date range in event cards - only event title shown.\nCalendar display: Show only Monday through Friday (no weekends).\n\n## Access Modes\n\nThe application provides two distinct access modes with separate pages and functionality:\n\n### Admin Page (`/`)\n- **Full administrative access** with complete event management capabilities\n- **Event Creation**: Quick add via natural language input and manual event creation forms\n- **Bulk Import**: Paste multiple events at once using structured text format\n- **All Export Features**: JSON export/import and PowerPoint export (Table, Monthly Grid, Quarterly Grid)\n- **Event Categories**: Full filtering and viewing by event types (Planning, Meeting, Monthly Review, Holidays)\n- **Search Functionality**: Filter events by title or keywords\n- **Drag & Drop**: Move events between dates with visual feedback\n- **Event Editing**: Modify existing events including title, type, dates, and times\n- **Statistics**: View total event counts and storage information\n\n### Viewer Page (`/viewer`)\n- **Read-only access** for viewing calendar data without modification capabilities\n- **Event Viewing**: Click events to see details but cannot edit or delete\n- **Export Features**: Full access to JSON and PowerPoint export functionality\n- **Event Categories**: Filter and view events by type with counts\n- **Search Functionality**: Filter events by title or keywords\n- **No Creation/Editing**: Cannot add new events or modify existing ones\n- **No Bulk Import**: Bulk import functionality restricted to admin mode only\n- **Statistics**: View total event counts and storage information\n\nBoth modes share the same underlying data storage and core viewing capabilities while maintaining clear separation between administrative and read-only functions.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for development tooling\n- **State Management**: Zustand for client-side state management with a centralized calendar store\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **Routing**: Wouter for lightweight client-side routing\n- **Data Fetching**: TanStack React Query for server state management and caching\n- **Drag & Drop**: DND Kit for implementing drag-and-drop event management\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Server Framework**: Express.js with TypeScript running on Node.js\n- **Development**: Hot module replacement via Vite integration in development mode\n- **Storage Interface**: Abstract storage interface with in-memory implementation for flexibility\n- **API Structure**: RESTful API design with `/api` prefix for all endpoints\n\n### Data Storage Solutions\n- **Primary Storage**: Browser-based IndexedDB using the `idb` library for local-first data persistence\n- **Schema Management**: Zod schemas for runtime validation and type safety\n- **Event Types**: Four predefined categories (Planning, Meeting, Monthly Review, Holidays) with specific color coding\n- **Data Export/Import**: JSON format for manual backup and restore functionality\n- **PowerPoint Export**: Three professional presentation formats:\n  - Table Format: Monthly tables with color-coded event listings\n  - Monthly Grid: Traditional calendar grids with event blocks\n  - Quarterly Grid: Compact 3-month overview slides for executive presentations\n\n### Client-Side Data Management\n- **Local Storage**: IndexedDB for persistent event storage with offline capability\n- **State Store**: Zustand store managing events, current date, view modes, and filters\n- **Natural Language Processing**: Custom date parser for interpreting natural language event input\n- **Drag & Drop**: Event repositioning across calendar dates with automatic date updates\n\n### UI/UX Design Patterns\n- **Responsive Design**: Mobile-first approach with desktop enhancements\n- **Component Architecture**: Modular component structure with reusable UI primitives\n- **Theme System**: CSS custom properties for consistent design tokens\n- **Modal Management**: Dialog-based modals for event creation and detail viewing\n- **Color Coding**: Predefined color scheme for different event types for visual categorization\n\n## External Dependencies\n\n### UI and Styling\n- **@radix-ui/\\***: Comprehensive set of unstyled, accessible UI primitives for complex components\n- **tailwindcss**: Utility-first CSS framework for rapid UI development\n- **class-variance-authority**: Type-safe variant API for component styling\n- **lucide-react**: Icon library providing consistent iconography\n\n### State Management and Data\n- **zustand**: Lightweight state management solution for React applications\n- **@tanstack/react-query**: Server state management with caching and synchronization\n- **idb**: Promise-based wrapper for IndexedDB API\n- **zod**: TypeScript-first schema declaration and validation library\n\n### Form Handling\n- **react-hook-form**: Performant forms with easy validation\n- **@hookform/resolvers**: Validation resolvers for various schema libraries\n\n### Drag and Drop\n- **@dnd-kit/core**: Modern drag and drop toolkit for React\n- **@dnd-kit/sortable**: Sortable preset for drag and drop functionality\n- **@dnd-kit/utilities**: Utility functions for drag and drop operations\n\n### Date Management\n- **date-fns**: Modern JavaScript date utility library for parsing and formatting dates\n\n### Document Generation\n- **pptxgenjs**: PowerPoint generation library for creating professional presentations with calendar data\n\n### Development Tools\n- **vite**: Fast build tool and development server with hot module replacement\n- **typescript**: Static type checking for enhanced developer experience\n- **@replit/vite-plugin-runtime-error-modal**: Development-time error handling","size_bytes":6430},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Calendar-specific colors\n        planning: \"var(--planning)\",\n        meeting: \"var(--meeting)\",\n        \"monthly-review\": \"var(--monthly-review)\",\n        holidays: \"var(--holidays)\",\n        // Additional grays from design\n        'gray-50': \"var(--gray-50)\",\n        'gray-100': \"var(--gray-100)\",\n        'gray-200': \"var(--gray-200)\",\n        'gray-600': \"var(--gray-600)\",\n        'gray-800': \"var(--gray-800)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: ['Inter', 'sans-serif'],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3235},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"scripts/backup-to-github.js":{"content":"import { Octokit } from '@octokit/rest';\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\n\nlet connectionSettings;\n\nasync function getAccessToken() {\n  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {\n    return connectionSettings.settings.access_token;\n  }\n  \n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME;\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=github',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n\n  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;\n\n  if (!connectionSettings || !accessToken) {\n    throw new Error('GitHub not connected');\n  }\n  return accessToken;\n}\n\n// WARNING: Never cache this client.\n// Access tokens expire, so a new client must be created each time.\n// Always call this function again to get a fresh client.\nasync function getUncachableGitHubClient() {\n  const accessToken = await getAccessToken();\n  return new Octokit({ auth: accessToken });\n}\n\nasync function createGitHubRepository(octokit, repoName, description = '') {\n  try {\n    const response = await octokit.repos.createForAuthenticatedUser({\n      name: repoName,\n      description: description,\n      private: false, // Make it public, change to true for private repo\n      auto_init: false\n    });\n    return response.data;\n  } catch (error) {\n    if (error.status === 422) {\n      console.log(`Repository ${repoName} already exists. Using existing repository.`);\n      const user = await octokit.users.getAuthenticated();\n      return {\n        clone_url: `https://github.com/${user.data.login}/${repoName}.git`,\n        html_url: `https://github.com/${user.data.login}/${repoName}`\n      };\n    }\n    throw error;\n  }\n}\n\nasync function initializeGitRepo(repoUrl, accessToken) {\n  const commands = [\n    'git init',\n    'git add .',\n    'git commit -m \"Initial commit: Calendar application with admin/viewer modes\"',\n    `git remote add origin ${repoUrl.replace('https://', `https://${accessToken}@`)}`,\n    'git branch -M main',\n    'git push -u origin main'\n  ];\n\n  for (const command of commands) {\n    try {\n      console.log(`Executing: ${command.replace(accessToken, '***')}`);\n      execSync(command, { stdio: 'inherit', cwd: process.cwd() });\n    } catch (error) {\n      if (command.includes('git push') && error.message.includes('up-to-date')) {\n        console.log('Repository is already up-to-date');\n        continue;\n      }\n      throw error;\n    }\n  }\n}\n\nasync function main() {\n  try {\n    console.log('🚀 Starting GitHub backup process...');\n    \n    // Get GitHub client\n    const octokit = await getUncachableGitHubClient();\n    const user = await octokit.users.getAuthenticated();\n    console.log(`✅ Connected to GitHub as: ${user.data.login}`);\n\n    // Create repository\n    const repoName = 'calendar-app';\n    const description = 'Local-first calendar application with natural language input, drag-and-drop, PowerPoint export, and admin/viewer modes';\n    \n    console.log(`📁 Creating repository: ${repoName}`);\n    const repo = await createGitHubRepository(octokit, repoName, description);\n    console.log(`✅ Repository created/found: ${repo.html_url}`);\n\n    // Get access token for git operations\n    const accessToken = await getAccessToken();\n\n    // Initialize git and push\n    console.log('📤 Initializing git repository and pushing code...');\n    await initializeGitRepo(repo.clone_url, accessToken);\n\n    console.log('🎉 Backup completed successfully!');\n    console.log(`📍 Your calendar project is now backed up at: ${repo.html_url}`);\n    \n    return {\n      success: true,\n      repositoryUrl: repo.html_url,\n      username: user.data.login,\n      repositoryName: repoName\n    };\n\n  } catch (error) {\n    console.error('❌ Backup failed:', error.message);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n}\n\n// Run the backup\nmain().then(result => {\n  console.log('\\n' + '='.repeat(50));\n  if (result.success) {\n    console.log('✅ BACKUP SUCCESSFUL');\n    console.log(`🔗 Repository: ${result.repositoryUrl}`);\n  } else {\n    console.log('❌ BACKUP FAILED');\n    console.log(`💥 Error: ${result.error}`);\n    process.exit(1);\n  }\n}).catch(error => {\n  console.error('💥 Fatal error:', error);\n  process.exit(1);\n});","size_bytes":4905},"scripts/upload-to-github.js":{"content":"import { Octokit } from '@octokit/rest';\nimport fs from 'fs';\nimport path from 'path';\n\nlet connectionSettings;\n\nasync function getAccessToken() {\n  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {\n    return connectionSettings.settings.access_token;\n  }\n  \n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME;\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=github',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n\n  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;\n\n  if (!connectionSettings || !accessToken) {\n    throw new Error('GitHub not connected');\n  }\n  return accessToken;\n}\n\nasync function getUncachableGitHubClient() {\n  const accessToken = await getAccessToken();\n  return new Octokit({ auth: accessToken });\n}\n\nasync function getAllFiles(dir, ignore = []) {\n  const files = [];\n  const items = fs.readdirSync(dir);\n\n  for (const item of items) {\n    const fullPath = path.join(dir, item);\n    const relativePath = path.relative('.', fullPath);\n    \n    // Skip ignored files and directories\n    if (ignore.some(pattern => relativePath.includes(pattern))) {\n      continue;\n    }\n\n    const stat = fs.statSync(fullPath);\n    if (stat.isDirectory()) {\n      files.push(...await getAllFiles(fullPath, ignore));\n    } else {\n      files.push(relativePath);\n    }\n  }\n  return files;\n}\n\nasync function uploadFileToGitHub(octokit, owner, repo, filePath, content, message) {\n  try {\n    // Check if file exists\n    let sha;\n    try {\n      const existing = await octokit.repos.getContent({\n        owner,\n        repo,\n        path: filePath\n      });\n      sha = existing.data.sha;\n    } catch (error) {\n      // File doesn't exist, that's okay\n    }\n\n    const params = {\n      owner,\n      repo,\n      path: filePath,\n      message,\n      content: Buffer.from(content).toString('base64')\n    };\n\n    if (sha) {\n      params.sha = sha;\n    }\n\n    await octokit.repos.createOrUpdateFileContents(params);\n    return true;\n  } catch (error) {\n    console.error(`Failed to upload ${filePath}:`, error.message);\n    return false;\n  }\n}\n\nasync function main() {\n  try {\n    console.log('🚀 Starting GitHub file upload process...');\n    \n    // Get GitHub client\n    const octokit = await getUncachableGitHubClient();\n    const user = await octokit.users.getAuthenticated();\n    console.log(`✅ Connected to GitHub as: ${user.data.login}`);\n\n    const owner = user.data.login;\n    const repo = 'calendar-app';\n\n    // Get all files to upload\n    const ignorePatterns = [\n      'node_modules',\n      '.git',\n      'dist',\n      '.DS_Store',\n      'server/public',\n      '.replit',\n      'replit.nix',\n      'scripts/backup-to-github.js',\n      'scripts/upload-to-github.js'\n    ];\n\n    console.log('📁 Scanning project files...');\n    const files = await getAllFiles('.', ignorePatterns);\n    console.log(`Found ${files.length} files to upload`);\n\n    // Upload files\n    let uploaded = 0;\n    let failed = 0;\n\n    for (const filePath of files) {\n      try {\n        const content = fs.readFileSync(filePath, 'utf8');\n        const success = await uploadFileToGitHub(\n          octokit, \n          owner, \n          repo, \n          filePath, \n          content, \n          `Upload ${filePath}`\n        );\n        \n        if (success) {\n          uploaded++;\n          console.log(`✅ Uploaded: ${filePath}`);\n        } else {\n          failed++;\n        }\n      } catch (error) {\n        console.error(`❌ Failed to read ${filePath}:`, error.message);\n        failed++;\n      }\n    }\n\n    console.log('\\n' + '='.repeat(50));\n    console.log('🎉 Upload completed!');\n    console.log(`✅ Successfully uploaded: ${uploaded} files`);\n    if (failed > 0) {\n      console.log(`❌ Failed uploads: ${failed} files`);\n    }\n    console.log(`📍 Your calendar project is now at: https://github.com/${owner}/${repo}`);\n    \n    return {\n      success: true,\n      repositoryUrl: `https://github.com/${owner}/${repo}`,\n      uploaded,\n      failed\n    };\n\n  } catch (error) {\n    console.error('❌ Upload failed:', error.message);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n}\n\n// Run the upload\nmain().then(result => {\n  if (result.success) {\n    console.log('✅ UPLOAD SUCCESSFUL');\n    console.log(`🔗 Repository: ${result.repositoryUrl}`);\n  } else {\n    console.log('❌ UPLOAD FAILED');\n    console.log(`💥 Error: ${result.error}`);\n    process.exit(1);\n  }\n}).catch(error => {\n  console.error('💥 Fatal error:', error);\n  process.exit(1);\n});","size_bytes":5148},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertEventSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Event API routes\n  \n  // Get all events\n  app.get(\"/api/events\", async (req, res) => {\n    try {\n      const events = await storage.getAllEvents();\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n      res.status(500).json({ error: \"Failed to fetch events\" });\n    }\n  });\n\n  // Get single event\n  app.get(\"/api/events/:id\", async (req, res) => {\n    try {\n      const event = await storage.getEvent(req.params.id);\n      if (!event) {\n        return res.status(404).json({ error: \"Event not found\" });\n      }\n      res.json(event);\n    } catch (error) {\n      console.error(\"Error fetching event:\", error);\n      res.status(500).json({ error: \"Failed to fetch event\" });\n    }\n  });\n\n  // Create new event\n  app.post(\"/api/events\", async (req, res) => {\n    try {\n      // Validate request body against schema\n      const validationResult = insertEventSchema.safeParse(req.body);\n      \n      if (!validationResult.success) {\n        const errors = validationResult.error.errors.map(err => ({\n          field: err.path.join('.'),\n          message: err.message\n        }));\n        return res.status(400).json({ \n          error: \"Validation failed\", \n          details: errors \n        });\n      }\n\n      // Clean up the validated data (handle nullable fields and ensure proper types)\n      const cleanedData = {\n        ...validationResult.data,\n        notes: validationResult.data.notes || undefined,\n        endDate: validationResult.data.endDate || undefined,\n        startTime: validationResult.data.startTime || undefined,\n        endTime: validationResult.data.endTime || undefined,\n        type: validationResult.data.type as any // Type is already validated by schema\n      };\n      \n      const event = await storage.createEvent(cleanedData);\n      res.status(201).json(event);\n    } catch (error) {\n      console.error(\"Error creating event:\", error);\n      res.status(500).json({ error: \"Failed to create event\" });\n    }\n  });\n\n  // Update event\n  app.put(\"/api/events/:id\", async (req, res) => {\n    try {\n      const event = await storage.updateEvent(req.params.id, req.body);\n      if (!event) {\n        return res.status(404).json({ error: \"Event not found\" });\n      }\n      res.json(event);\n    } catch (error) {\n      console.error(\"Error updating event:\", error);\n      res.status(500).json({ error: \"Failed to update event\" });\n    }\n  });\n\n  // Delete event\n  app.delete(\"/api/events/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteEvent(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Event not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting event:\", error);\n      res.status(500).json({ error: \"Failed to delete event\" });\n    }\n  });\n\n  // Get events by date range\n  app.get(\"/api/events/range/:startDate/:endDate\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.params;\n      const events = await storage.getEventsByDateRange(startDate, endDate);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching events by date range:\", error);\n      res.status(500).json({ error: \"Failed to fetch events by date range\" });\n    }\n  });\n\n  // Get events by type\n  app.get(\"/api/events/type/:type\", async (req, res) => {\n    try {\n      const events = await storage.getEventsByType(req.params.type);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching events by type:\", error);\n      res.status(500).json({ error: \"Failed to fetch events by type\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":3964},"server/storage.ts":{"content":"import { type Event, type InsertEvent, type DbEvent, type DbInsertEvent } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// Storage interface for calendar events\nexport interface IStorage {\n  // Event CRUD operations\n  getAllEvents(): Promise<Event[]>;\n  getEvent(id: string): Promise<Event | undefined>;\n  createEvent(event: InsertEvent): Promise<Event>;\n  updateEvent(id: string, event: Partial<InsertEvent>): Promise<Event | undefined>;\n  deleteEvent(id: string): Promise<boolean>;\n  getEventsByDateRange(startDate: string, endDate: string): Promise<Event[]>;\n  getEventsByType(type: string): Promise<Event[]>;\n}\n\nimport { db } from \"./db\";\nimport { events } from \"@shared/schema\";\nimport { eq, and, gte, lte } from \"drizzle-orm\";\n\n// Convert DbEvent (with timestamp) to Event (with string dates)\nfunction dbEventToEvent(dbEvent: DbEvent): Event {\n  return {\n    id: dbEvent.id,\n    title: dbEvent.title,\n    type: dbEvent.type as any,\n    date: dbEvent.date,\n    endDate: dbEvent.endDate || undefined,\n    startTime: dbEvent.startTime || undefined,\n    endTime: dbEvent.endTime || undefined,\n    notes: dbEvent.notes || undefined,\n    createdAt: dbEvent.createdAt.toISOString(),\n    updatedAt: dbEvent.updatedAt.toISOString(),\n  };\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getAllEvents(): Promise<Event[]> {\n    const dbEvents = await db.select().from(events).orderBy(events.date);\n    return dbEvents.map(dbEventToEvent);\n  }\n\n  async getEvent(id: string): Promise<Event | undefined> {\n    const [dbEvent] = await db.select().from(events).where(eq(events.id, id));\n    return dbEvent ? dbEventToEvent(dbEvent) : undefined;\n  }\n\n  async createEvent(event: InsertEvent): Promise<Event> {\n    const now = new Date();\n    const [dbEvent] = await db\n      .insert(events)\n      .values({\n        title: event.title,\n        type: event.type,\n        date: event.date,\n        endDate: event.endDate,\n        startTime: event.startTime,\n        endTime: event.endTime,\n        notes: event.notes,\n        createdAt: now,\n        updatedAt: now,\n      })\n      .returning();\n    \n    return dbEventToEvent(dbEvent);\n  }\n\n  async updateEvent(id: string, eventUpdate: Partial<InsertEvent>): Promise<Event | undefined> {\n    const [dbEvent] = await db\n      .update(events)\n      .set({\n        ...eventUpdate,\n        updatedAt: new Date(),\n      })\n      .where(eq(events.id, id))\n      .returning();\n    \n    return dbEvent ? dbEventToEvent(dbEvent) : undefined;\n  }\n\n  async deleteEvent(id: string): Promise<boolean> {\n    const result = await db.delete(events).where(eq(events.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getEventsByDateRange(startDate: string, endDate: string): Promise<Event[]> {\n    const dbEvents = await db\n      .select()\n      .from(events)\n      .where(and(gte(events.date, startDate), lte(events.date, endDate)))\n      .orderBy(events.date);\n    \n    return dbEvents.map(dbEventToEvent);\n  }\n\n  async getEventsByType(type: string): Promise<Event[]> {\n    const dbEvents = await db\n      .select()\n      .from(events)\n      .where(eq(events.type, type as any))\n      .orderBy(events.date);\n    \n    return dbEvents.map(dbEventToEvent);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":3266},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\nimport { pgTable, varchar, text, timestamp } from \"drizzle-orm/pg-core\";\nimport { sql } from \"drizzle-orm\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\n\nexport const eventTypeSchema = z.enum([\"PLANNING\", \"MEETING\", \"MONTHLY_REVIEW\", \"HOLIDAYS\", \"QBR\"]);\n\nexport const eventSchema = z.object({\n  id: z.string(),\n  title: z.string().min(1, \"Title is required\"),\n  type: eventTypeSchema,\n  date: z.string(), // ISO date string (start date)\n  endDate: z.string().optional(), // ISO date string (end date for multi-day events)\n  startTime: z.string().optional(), // HH:MM format\n  endTime: z.string().optional(), // HH:MM format\n  notes: z.string().optional(),\n  createdAt: z.string(), // ISO date string\n  updatedAt: z.string(), // ISO date string\n});\n\nexport type Event = z.infer<typeof eventSchema>;\nexport type EventType = z.infer<typeof eventTypeSchema>;\nexport type InsertEvent = Omit<Event, 'id' | 'createdAt' | 'updatedAt'>;\n\nexport const createEventSchema = eventSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).refine((data) => {\n  // If endDate is provided, it should be on or after the start date\n  if (data.endDate && data.date) {\n    return new Date(data.endDate) >= new Date(data.date);\n  }\n  return true;\n}, {\n  message: \"End date must be on or after start date\",\n  path: [\"endDate\"],\n});\n\nexport const updateEventSchema = eventSchema.partial().required({ id: true });\n\n// Export/Import schemas\nexport const exportDataSchema = z.object({\n  events: z.array(eventSchema),\n  exportedAt: z.string(),\n  version: z.string(),\n});\n\nexport type ExportData = z.infer<typeof exportDataSchema>;\n\n// Drizzle database table definitions\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull().$type<EventType>(),\n  date: varchar(\"date\", { length: 10 }).notNull(), // ISO date string (YYYY-MM-DD)\n  endDate: varchar(\"end_date\", { length: 10 }), // ISO date string for multi-day events\n  startTime: varchar(\"start_time\", { length: 5 }), // HH:MM format\n  endTime: varchar(\"end_time\", { length: 5 }), // HH:MM format  \n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Drizzle-generated schemas with Zod validation\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const selectEventSchema = createSelectSchema(events);\n\n// Type exports for Drizzle\nexport type DbEvent = typeof events.$inferSelect;\nexport type DbInsertEvent = typeof events.$inferInsert;\n","size_bytes":2755},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport CalendarPage from \"@/pages/CalendarPage\";\nimport CalendarViewerPage from \"@/pages/CalendarViewerPage\";\nimport NotFound from \"@/pages/not-found\";\nimport { useCalendarStore } from \"@/stores/calendarStore\";\n\n// Expose store to window for console access\nif (typeof window !== 'undefined') {\n  (window as any).useCalendarStore = useCalendarStore;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={CalendarPage} />\n      <Route path=\"/viewer\" component={CalendarViewerPage} />\n      <Route><NotFound /></Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n\n","size_bytes":1043},"client/src/UserPage.tsx":{"content":"import React from \"react\";\n\nexport default function UserPage() {\n  return (\n    <div>\n      <h1>User Calendar</h1>\n      <p>Here you can view and manage your own events.</p>\n    </div>\n  );\n}","size_bytes":191},"client/src/adminpage.tsx":{"content":"import React from \"react\";\n\nexport default function AdminPage() {\n  return (\n    <div>\n      <h1>Admin Dashboard</h1>\n      <p>Here you can manage all calendars and events.</p>\n    </div>\n  );\n}\n","size_bytes":195},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Calendar-specific colors */\n  --planning: hsl(217 91% 60%);\n  /* #2563eb - Blue for PI planning */\n  --meeting: hsl(0 84% 60%);\n  /* #dc2626 - Red for Sprint start */\n  --monthly-review: hsl(0 0% 0%);\n  /* #000000 - Black for FY week */\n  --holidays: hsl(30 100% 50%);\n  /* #FF9000 - Orange for Holidays */\n\n  /* Additional grays from design */\n  --gray-50: hsl(0 0% 98%);\n  /* #FAFAFA */\n  --gray-100: hsl(0 0% 96%);\n  /* #F5F5F5 */\n  --gray-200: hsl(220 13% 91%);\n  /* #E5E7EB */\n  --gray-600: hsl(0 0% 40%);\n  /* #666666 */\n  --gray-800: hsl(0 0% 20%);\n  /* #333333 */\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background-color: hsl(var(--gray-50));\n  }\n}\n\n/* Calendar-specific utility classes */\n.event-planning {\n  background-color: hsl(var(--planning));\n}\n\n.event-meeting {\n  background-color: hsl(var(--meeting));\n}\n\n.event-holidays {\n  background-color: hsl(var(--holidays));\n}\n\n/* Compact month view styling */\n.calendar-compact .rbc-month-view {\n  font-size: 0.85rem;\n  /* smaller text */\n}\n\n.calendar-compact .rbc-month-row {\n  min-height: 80px !important;\n  /* reduce row height */\n}\n\n.calendar-compact .rbc-date-cell {\n  padding: 2px !important;\n  /* less padding */\n}","size_bytes":6315},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/BulkImportButton.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { createPIPlanningEvents } from '@/utils/bulkEventCreator';\nimport { useToast } from '@/hooks/use-toast';\n\nexport function BulkImportButton() {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleImport = async () => {\n    setIsLoading(true);\n    try {\n      await createPIPlanningEvents();\n      toast({\n        title: \"Success\",\n        description: \"PI Planning events added successfully!\"\n      });\n    } catch (error) {\n      console.error('Error importing events:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to add PI Planning events\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Button \n      onClick={handleImport}\n      disabled={isLoading}\n      data-testid=\"bulk-import-button\"\n    >\n      {isLoading ? 'Adding Events...' : 'Add PI Planning Events'}\n    </Button>\n  );\n}","size_bytes":1020},"client/src/components/BulkImportModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { useCalendarStore } from '@/stores/calendarStore';\nimport { useToast } from '@/hooks/use-toast';\nimport { InsertEvent } from '@shared/schema';\nimport BulkPasteImporter from '@/components/BulkPasteImporter';\nimport { BulkEvent } from '@/utils/bulkParse';\n\ninterface BulkImportModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function BulkImportModal({ isOpen, onClose }: BulkImportModalProps) {\n  const { createEvent } = useCalendarStore();\n  const { toast } = useToast();\n\n  const handleImport = async (parsedEvents: BulkEvent[]) => {\n    try {\n      if (parsedEvents.length === 0) {\n        toast({\n          title: 'No events found',\n          description: 'Could not parse any events from the input text.',\n          variant: 'destructive',\n        });\n        return;\n      }\n\n      // Convert parsed events to InsertEvent format and create them\n      for (const event of parsedEvents) {\n        const insertEvent: InsertEvent = {\n          title: event.title,\n          date: event.date,\n          type: event.type as 'PLANNING' | 'MEETING' | 'MONTHLY_REVIEW' | 'HOLIDAYS',\n          ...(event.startDate && event.endDate && {\n            startDate: event.startDate,\n            endDate: event.endDate,\n          }),\n        };\n        \n        await createEvent(insertEvent);\n      }\n\n      toast({\n        title: 'Success',\n        description: `Successfully imported ${parsedEvents.length} events!`,\n      });\n\n      onClose();\n    } catch (error) {\n      console.error('Bulk import error:', error);\n      toast({\n        title: 'Import failed',\n        description: 'Failed to import events. Please check your input format.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-3xl\">\n        <DialogHeader>\n          <DialogTitle>Bulk Import Events</DialogTitle>\n        </DialogHeader>\n        \n        <BulkPasteImporter onImport={handleImport} />\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":2117},"client/src/components/BulkPasteImporter.tsx":{"content":"import { useState } from \"react\";\nimport { parseBulkText, BulkEvent } from \"../utils/bulkParse\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\ninterface BulkPasteImporterProps {\n  onImport: (events: BulkEvent[]) => Promise<void>;\n}\n\nexport default function BulkPasteImporter({ onImport }: BulkPasteImporterProps) {\n  const [text, setText] = useState(\"\");\n  const [clip, setClip] = useState(true);\n  const [preview, setPreview] = useState<BulkEvent[]>([]);\n\n  const handlePreview = () => {\n    const evts = parseBulkText(text, { clipToOperatingYear: clip });\n    setPreview(evts);\n  };\n\n  const handleImport = async () => {\n    const evts = parseBulkText(text, { clipToOperatingYear: clip });\n    await onImport(evts); // save each to IndexedDB\n    setText(\"\");\n    setPreview([]);\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <Textarea\n        className=\"w-full h-40\"\n        placeholder=\"Paste your list here…\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n        data-testid=\"bulk-paste-textarea\"\n      />\n      <div className=\"flex items-center gap-3\">\n        <div className=\"flex items-center gap-2\">\n          <Checkbox \n            checked={clip} \n            onCheckedChange={setClip}\n            data-testid=\"checkbox-clip-operating-year\"\n          />\n          <label className=\"text-sm\">\n            Clip to operating year (Aug 1, 2025 → Jul 31, 2026)\n          </label>\n        </div>\n        <Button \n          onClick={handlePreview} \n          variant=\"outline\"\n          data-testid=\"button-preview-events\"\n        >\n          Preview\n        </Button>\n        <Button \n          onClick={handleImport}\n          data-testid=\"button-import-events\"\n        >\n          Import\n        </Button>\n      </div>\n\n      {preview.length > 0 && (\n        <div className=\"border rounded-lg p-4 bg-gray-50\">\n          <div className=\"font-semibold mb-2\">\n            Preview ({preview.length} events)\n          </div>\n          <ul className=\"list-disc pl-5 space-y-1 text-sm\">\n            {preview.map((e, i) => (\n              <li key={i}>\n                <span className=\"text-gray-600\">{e.date}</span> — \n                <span className=\"font-medium text-blue-600\">\n                  {e.type.replace(\"_\", \" \")}\n                </span>: \n                <span>{e.title}</span>\n                {e.startDate && e.endDate && e.startDate !== e.endDate && (\n                  <span className=\"text-gray-500 ml-2\">\n                    (Multi-day: {e.startDate} to {e.endDate})\n                  </span>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":2769},"client/src/components/Calendar.tsx":{"content":"import { useState, useEffect, useMemo } from 'react';\nimport { \n  startOfMonth, \n  endOfMonth, \n  startOfWeek, \n  endOfWeek, \n  eachDayOfInterval, \n  format, \n  isToday, \n  isSameMonth, \n  addMonths, \n  subMonths,\n  startOfDay,\n} from 'date-fns';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { EventCard } from './EventCard';\nimport { useCalendarStore } from '@/stores/calendarStore';\nimport { Event } from '@shared/schema';\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport {\n  DndContext,\n  DragEndEvent,\n  DragOverlay,\n  DragStartEvent,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  closestCorners,\n  useDroppable,\n} from '@dnd-kit/core';\n\ninterface CalendarProps {\n  onEventClick: (event: Event) => void;\n  onDateClick: (date: string, defaultDate?: string) => void;\n  viewerMode?: boolean;\n}\n\nexport function Calendar({ onEventClick, onDateClick, viewerMode = false }: CalendarProps) {\n  const {\n    currentDate,\n    setCurrentDate,\n    viewMode,\n    getEventsForDate,\n    getFilteredEvents,\n    updateEvent,\n  } = useCalendarStore();\n\n  const [activeEvent, setActiveEvent] = useState<Event | null>(null);\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    })\n  );\n\n  // Helper function to generate quarter header with proper year handling\n  const generateQuarterHeader = (quarterData: any) => {\n    const monthNames = quarterData.months.map((month: any) => format(month.month, 'MMM'));\n    const years = quarterData.months.map((month: any) => format(month.month, 'yyyy'));\n    \n    // Check if all months are in the same year\n    const uniqueYears = Array.from(new Set(years));\n    \n    if (uniqueYears.length === 1) {\n      // All months in same year: \"Q1: Aug - Sep - Oct 2025\"\n      return `${quarterData.quarterName}: ${monthNames.join(' - ')} ${uniqueYears[0]}`;\n    } else {\n      // Months span multiple years: \"Q2: Nov - Dec 2025 - Jan 2026\"\n      const monthYearPairs = quarterData.months.map((month: any) => \n        `${format(month.month, 'MMM')} ${format(month.month, 'yyyy')}`\n      );\n      return `${quarterData.quarterName}: ${monthYearPairs.join(' - ')}`;\n    }\n  };\n\n  // Generate calendar days for quarterly view\n  const getQuarterMonths = (date: Date) => {\n    const month = date.getMonth(); // 0-11\n    \n    // Q1: Aug(7) - Oct(9)\n    if (month >= 7 && month <= 9) {\n      return [7, 8, 9]; // Aug, Sep, Oct\n    }\n    // Q2: Nov(10) - Jan(0)\n    else if (month >= 10 || month <= 0) {\n      return [10, 11, 0]; // Nov, Dec, Jan\n    }\n    // Q3: Feb(1) - Apr(3)\n    else if (month >= 1 && month <= 3) {\n      return [1, 2, 3]; // Feb, Mar, Apr\n    }\n    // Q4: May(4) - Jul(6)\n    else {\n      return [4, 5, 6]; // May, Jun, Jul\n    }\n  };\n\n  const getQuarterNumber = (date: Date) => {\n    const month = date.getMonth(); // 0-11\n    \n    if (month >= 7 && month <= 9) return 1; // Q1: Aug-Oct\n    if (month >= 10 || month <= 0) return 2; // Q2: Nov-Jan\n    if (month >= 1 && month <= 3) return 3; // Q3: Feb-Apr\n    return 4; // Q4: May-Jul\n  };\n\n  // Generate data for all 4 quarters at once\n  const allQuartersData = useMemo(() => {\n    const currentYear = new Date().getFullYear();\n    \n    const quarters = [\n      { name: 'Q1', months: [7, 8, 9] },     // Aug, Sep, Oct\n      { name: 'Q2', months: [10, 11, 0] },   // Nov, Dec, Jan\n      { name: 'Q3', months: [1, 2, 3] },     // Feb, Mar, Apr\n      { name: 'Q4', months: [4, 5, 6] }      // May, Jun, Jul\n    ];\n    \n    return quarters.map(quarter => {\n      const monthsData = quarter.months.map(monthIndex => {\n        // Handle year transitions for operating year (Aug 2025 - Jul 2026)\n        let monthYear = currentYear;\n        \n        // Q2: January is in next year when quarter includes November \n        if (monthIndex === 0 && quarter.months.includes(10)) {\n          monthYear = currentYear + 1;\n        }\n        // Q3 and Q4: All months are in next year for operating year\n        else if (quarter.name === 'Q3' || quarter.name === 'Q4') {\n          monthYear = currentYear + 1;\n        }\n        \n        const month = new Date(monthYear, monthIndex, 1);\n        const monthStart = startOfMonth(month);\n        const monthEnd = endOfMonth(month);\n        const calendarStart = startOfWeek(monthStart);\n        const calendarEnd = endOfWeek(monthEnd);\n        \n        return {\n          month,\n          days: eachDayOfInterval({\n            start: calendarStart,\n            end: calendarEnd,\n          })\n        };\n      });\n      \n      return {\n        quarterName: quarter.name,\n        months: monthsData\n      };\n    });\n  }, []);\n\n  const filteredEvents = getFilteredEvents();\n\n  const previousQuarter = () => {\n    // Move to previous quarter (3 months back)\n    setCurrentDate(subMonths(currentDate, 3));\n  };\n\n  const nextQuarter = () => {\n    // Move to next quarter (3 months forward)\n    setCurrentDate(addMonths(currentDate, 3));\n  };\n\n  const goToToday = () => {\n    setCurrentDate(new Date());\n  };\n\n  const goToQuarter = (quarter: string) => {\n    const currentYear = new Date().getFullYear();\n    let targetMonth: number;\n    \n    switch (quarter) {\n      case 'Q1':\n        targetMonth = 8; // September (middle of Q1: Aug-Oct)\n        break;\n      case 'Q2':\n        targetMonth = 11; // December (middle of Q2: Nov-Jan)\n        break;\n      case 'Q3':\n        targetMonth = 2; // March (middle of Q3: Feb-Apr)\n        break;\n      case 'Q4':\n        targetMonth = 5; // June (middle of Q4: May-Jul)\n        break;\n      default:\n        return;\n    }\n    \n    setCurrentDate(new Date(currentYear, targetMonth, 1));\n  };\n\n  const handleDateClick = (date: Date) => {\n    const dateStr = format(date, 'yyyy-MM-dd');\n    onDateClick(dateStr, dateStr);\n  };\n\n  const handleDragStart = (event: DragStartEvent) => {\n    const { active } = event;\n    if (active.data.current?.type === 'event') {\n      setActiveEvent(active.data.current.event);\n    }\n  };\n\n  const handleDragEnd = async (event: DragEndEvent) => {\n    const { active, over } = event;\n    \n    setActiveEvent(null);\n\n    if (!over) return;\n\n    const activeEvent = active.data.current?.event as Event;\n    const overId = over.id as string;\n    \n    // Check if dropping on a date cell\n    if (overId.startsWith('date-') && activeEvent) {\n      const newDate = overId.replace('date-', '');\n      \n      if (newDate !== activeEvent.date) {\n        try {\n          await updateEvent(activeEvent.id, { date: newDate });\n        } catch (error) {\n          console.error('Failed to move event:', error);\n        }\n      }\n    }\n  };\n\n  const renderWeekdays = () => {\n    const weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'];\n    return (\n      <div className=\"grid grid-cols-5 bg-gray-50 border-b border-gray-200\">\n        {weekdays.map((day) => (\n          <div key={day} className=\"p-4 text-center\">\n            <span className=\"text-sm font-semibold text-gray-700\">{day}</span>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const DroppableDay = ({ day, monthData }: { day: Date; monthData: Date }) => {\n    const dateStr = format(day, 'yyyy-MM-dd');\n    const { setNodeRef, isOver } = useDroppable({\n      id: `date-${dateStr}`,\n    });\n\n    const dayNumber = format(day, 'd');\n    const isCurrentMonth = isSameMonth(day, monthData);\n    const isCurrentDay = isToday(day);\n    const dayEvents = getEventsForDate(dateStr);\n\n    if (viewerMode) {\n      // Viewer mode - no drag and drop, no date clicking\n      return (\n        <div\n          key={dateStr}\n          className={`min-h-20 p-1 border-b border-gray-200 ${\n            isCurrentDay ? 'bg-blue-50 border-blue-200' : ''\n          }`}\n          data-testid={`calendar-date-${dateStr}`}\n        >\n          <span\n            className={`text-xs mb-1 block ${\n              isCurrentDay\n                ? 'font-bold text-blue-600'\n                : isCurrentMonth\n                ? 'font-semibold text-gray-800'\n                : 'text-gray-400'\n            }`}\n          >\n            {dayNumber}\n            {isCurrentDay && (\n              <div className=\"text-xs text-blue-600 font-medium\">Today</div>\n            )}\n          </span>\n          \n          <div className=\"space-y-1\">\n            {dayEvents.slice(0, 2).map((event) => (\n              <EventCard\n                key={event.id}\n                event={event}\n                onClick={onEventClick}\n                data-testid={`event-${event.id}`}\n                viewerMode={true}\n              />\n            ))}\n            {dayEvents.length > 2 && (\n              <div className=\"text-xs text-gray-500 px-1\">\n                +{dayEvents.length - 2}\n              </div>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div\n        ref={setNodeRef}\n        key={dateStr}\n        className={`min-h-20 p-1 border-b border-gray-200 hover:bg-gray-50 transition-colors cursor-pointer ${\n          isCurrentDay ? 'bg-blue-50 border-blue-200' : ''\n        } ${isOver ? 'bg-blue-100 border-blue-300' : ''}`}\n        onClick={() => handleDateClick(day)}\n        data-testid={`calendar-date-${dateStr}`}\n      >\n        <span\n          className={`text-xs mb-1 block ${\n            isCurrentDay\n              ? 'font-bold text-blue-600'\n              : isCurrentMonth\n              ? 'font-semibold text-gray-800'\n              : 'text-gray-400'\n          }`}\n        >\n          {dayNumber}\n          {isCurrentDay && (\n            <div className=\"text-xs text-blue-600 font-medium\">Today</div>\n          )}\n        </span>\n        \n        <div className=\"space-y-1\">\n          {dayEvents.slice(0, 2).map((event) => (\n            <EventCard\n              key={event.id}\n              event={event}\n              onClick={onEventClick}\n              data-testid={`event-${event.id}`}\n            />\n          ))}\n          {dayEvents.length > 2 && (\n            <div className=\"text-xs text-gray-500 px-1\">\n              +{dayEvents.length - 2}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n\n\n  const renderMonth = (monthData: { month: Date; days: Date[] }, index: number) => {\n    return (\n      <div key={index} className=\"mb-8\">\n        <h3 className=\"text-lg font-semibold text-gray-800 mb-4 text-center\">\n          {format(monthData.month, 'MMMM yyyy')}\n        </h3>\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden\">\n          {renderWeekdays()}\n          <div className=\"grid grid-cols-5 divide-x divide-gray-200\">\n            {monthData.days\n              .filter(day => {\n                const dayOfWeek = day.getDay();\n                return dayOfWeek >= 1 && dayOfWeek <= 5; // Monday (1) to Friday (5)\n              })\n              .map(day => (\n                <DroppableDay key={format(day, 'yyyy-MM-dd')} day={day} monthData={monthData.month} />\n              ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <main className=\"flex-1 p-4 lg:p-6 overflow-auto\">\n      {/* Calendar Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-4\">\n          <h2 \n            className=\"text-2xl font-bold text-gray-800\"\n            data-testid=\"current-year\"\n          >\n            Operating Year {new Date().getFullYear()}-{(new Date().getFullYear() + 1).toString().slice(2)}\n          </h2>\n          <Button\n            variant=\"ghost\"\n            onClick={goToToday}\n            className=\"px-4 py-2 text-sm font-medium text-[#02C8FF] hover:bg-[#02C8FF] hover:text-white rounded-lg transition-all duration-200\"\n            data-testid=\"button-go-to-today\"\n          >\n            Today\n          </Button>\n        </div>\n\n        <div className=\"hidden lg:flex items-center space-x-3\">\n          <div className=\"flex items-center text-sm text-gray-600\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\" />\n            <span data-testid=\"event-count-display\">\n              {filteredEvents.length} events\n            </span>\n            <span className=\"mx-2\">•</span>\n            <span className=\"text-xs\">Stored locally</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Calendar Grid - All 4 Quarters */}\n      {viewerMode ? (\n        <div className=\"space-y-12\">\n          {allQuartersData.map((quarterData, quarterIndex) => (\n            <div key={quarterIndex} className=\"space-y-6\">\n              {/* Quarter Header */}\n              <div className=\"border-b border-gray-200 pb-4\">\n                <h3 className=\"text-xl font-bold text-gray-800 mb-2\">\n                  {generateQuarterHeader(quarterData)}\n                </h3>\n              </div>\n              \n              {/* 3 Months in this Quarter */}\n              <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n                {quarterData.months.map((monthData, monthIndex) => renderMonth(monthData, monthIndex))}\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <DndContext\n          sensors={sensors}\n          collisionDetection={closestCorners}\n          onDragStart={handleDragStart}\n          onDragEnd={handleDragEnd}\n        >\n          <div className=\"space-y-12\">\n            {allQuartersData.map((quarterData, quarterIndex) => (\n              <div key={quarterIndex} className=\"space-y-6\">\n                {/* Quarter Header */}\n                <div className=\"border-b border-gray-200 pb-4\">\n                  <h3 className=\"text-xl font-bold text-gray-800 mb-2\">\n                    {generateQuarterHeader(quarterData)}\n                  </h3>\n                </div>\n                \n                {/* 3 Months in this Quarter */}\n                <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n                  {quarterData.months.map((monthData, monthIndex) => renderMonth(monthData, monthIndex))}\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          <DragOverlay>\n            {activeEvent ? (\n              <EventCard event={activeEvent} isDragging />\n            ) : null}\n          </DragOverlay>\n        </DndContext>\n      )}\n    </main>\n  );\n}\n","size_bytes":14293},"client/src/components/CreateEventModal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useCalendarStore } from '@/stores/calendarStore';\nimport { createEventSchema, EventType, Event } from '@shared/schema';\nimport { useToast } from '@/hooks/use-toast';\nimport { X, Plus } from 'lucide-react';\nimport { formatDateSafe } from '@/lib/dateParser';\n\ninterface CreateEventModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  defaultDate?: string;\n  editingEvent?: Event | null;\n}\n\nconst eventTypeLabels: Record<EventType, string> = {\n  PLANNING: 'Planning',\n  MEETING: 'Meeting',\n  MONTHLY_REVIEW: 'Monthly Review',\n  HOLIDAYS: 'Holidays',\n};\n\nexport function CreateEventModal({ isOpen, onClose, defaultDate, editingEvent }: CreateEventModalProps) {\n  const { createEvent, updateEvent, isLoading } = useCalendarStore();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm({\n    resolver: zodResolver(createEventSchema),\n    defaultValues: {\n      title: '',\n      type: 'MEETING' as EventType,\n      date: formatDateSafe(new Date()),\n      endDate: '',\n      startTime: '',\n      endTime: '',\n      notes: '',\n    },\n  });\n\n  // Reset form when editing event changes\n  useEffect(() => {\n    if (editingEvent) {\n      form.reset({\n        title: editingEvent.title || '',\n        type: editingEvent.type || 'MEETING',\n        date: editingEvent.date || formatDateSafe(new Date()),\n        endDate: editingEvent.endDate || '',\n        startTime: editingEvent.startTime || '',\n        endTime: editingEvent.endTime || '',\n        notes: editingEvent.notes || '',\n      });\n    } else {\n      form.reset({\n        title: '',\n        type: 'MEETING' as EventType,\n        date: defaultDate || formatDateSafe(new Date()),\n        endDate: '',\n        startTime: '',\n        endTime: '',\n        notes: '',\n      });\n    }\n  }, [editingEvent, defaultDate, form]);\n\n  const onSubmit = async (data: any) => {\n    try {\n      setIsSubmitting(true);\n      \n      if (editingEvent) {\n        // Update existing event\n        await updateEvent(editingEvent.id, {\n          ...data,\n          endDate: data.endDate || undefined,\n          startTime: data.startTime || undefined,\n          endTime: data.endTime || undefined,\n          notes: data.notes || undefined,\n        });\n        \n        toast({\n          title: 'Event updated',\n          description: 'Your event has been updated successfully.',\n        });\n      } else {\n        // Create new event\n        await createEvent({\n          ...data,\n          endDate: data.endDate || undefined,\n          startTime: data.startTime || undefined,\n          endTime: data.endTime || undefined,\n          notes: data.notes || undefined,\n        });\n        \n        toast({\n          title: 'Event created',\n          description: 'Your event has been created successfully.',\n        });\n      }\n      \n      form.reset();\n      onClose();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: `Failed to ${editingEvent ? 'update' : 'create'} event. Please try again.`,\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-xl font-bold text-gray-800\">\n              {editingEvent ? 'Edit Event' : 'Create New Event'}\n            </DialogTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleClose}\n              className=\"h-6 w-6 text-gray-400 hover:text-gray-600\"\n              data-testid=\"close-create-modal\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-sm font-medium text-gray-700\">\n                    Event Title\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter event title...\"\n                      className=\"w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#02C8FF] focus:border-[#02C8FF] transition-all duration-200\"\n                      data-testid=\"input-event-title\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"type\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-sm font-medium text-gray-700\">\n                    Event Type\n                  </FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger \n                        className=\"w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#02C8FF] focus:border-[#02C8FF] transition-all duration-200\"\n                        data-testid=\"select-event-type\"\n                      >\n                        <SelectValue placeholder=\"Select event type\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {Object.entries(eventTypeLabels).map(([value, label]) => (\n                        <SelectItem key={value} value={value}>\n                          {label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm font-medium text-gray-700\">\n                      Start Date\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"date\"\n                        className=\"w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#02C8FF] focus:border-[#02C8FF] transition-all duration-200\"\n                        data-testid=\"input-event-start-date\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"endDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm font-medium text-gray-700\">\n                      End Date (Optional)\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"date\"\n                        className=\"w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#02C8FF] focus:border-[#02C8FF] transition-all duration-200\"\n                        data-testid=\"input-event-end-date\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"startTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm font-medium text-gray-700\">\n                      Start Time\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"time\"\n                        className=\"w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#02C8FF] focus:border-[#02C8FF] transition-all duration-200\"\n                        data-testid=\"input-start-time\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"endTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm font-medium text-gray-700\">\n                      End Time\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"time\"\n                        className=\"w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#02C8FF] focus:border-[#02C8FF] transition-all duration-200\"\n                        data-testid=\"input-end-time\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-sm font-medium text-gray-700\">\n                    Notes (Optional)\n                  </FormLabel>\n                  <FormControl>\n                    <Textarea\n                      rows={3}\n                      placeholder=\"Additional details...\"\n                      className=\"w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#02C8FF] focus:border-[#02C8FF] transition-all duration-200 resize-none\"\n                      data-testid=\"textarea-event-notes\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                className=\"flex-1 px-4 py-3 border border-gray-200 text-gray-600 rounded-xl hover:bg-gray-50 transition-all duration-200 font-medium\"\n                data-testid=\"button-cancel-create\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting || isLoading}\n                className=\"flex-1 px-4 py-3 bg-[#02C8FF] text-white rounded-xl hover:bg-opacity-90 transition-all duration-200 font-medium\"\n                data-testid={editingEvent ? \"button-update-event\" : \"button-create-event\"}\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                {editingEvent ? 'Update Event' : 'Create Event'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12072},"client/src/components/EventCard.tsx":{"content":"import { Event, EventType } from '@shared/schema';\nimport { useDraggable } from '@dnd-kit/core';\nimport { CSS } from '@dnd-kit/utilities';\nimport { cn } from '@/lib/utils';\nimport { format } from 'date-fns';\n\ninterface EventCardProps {\n  event: Event;\n  onClick?: (event: Event) => void;\n  isDragging?: boolean;\n  viewerMode?: boolean;\n}\n\nconst eventTypeColors: Record<EventType, string> = {\n  PLANNING: 'bg-[#2563eb]',\n  MEETING: 'bg-[#dc2626]',\n  MONTHLY_REVIEW: 'bg-[#000000]',\n  HOLIDAYS: 'bg-[#FF9000]',\n  QBR: 'bg-[#ec4899]',\n};\n\nexport function EventCard({ event, onClick, isDragging = false, viewerMode = false }: EventCardProps) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    isDragging: isDragActive,\n  } = useDraggable({\n    id: event.id,\n    data: {\n      type: 'event',\n      event,\n    },\n    disabled: viewerMode, // Disable dragging in viewer mode\n  });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    opacity: isDragging || isDragActive ? 0.5 : 1,\n  };\n\n  const handleClick = (e: React.MouseEvent) => {\n    if (!isDragging && !isDragActive) {\n      e.stopPropagation();\n      onClick?.(event);\n    }\n  };\n\n  // Check if this is a multi-day event\n  const isMultiDay = event.endDate && event.endDate !== event.date;\n  \n  // Format date range for multi-day events\n  const formatDateRange = () => {\n    if (!isMultiDay) return '';\n    \n    try {\n      const startDate = new Date(event.date + 'T00:00:00');\n      const endDate = new Date(event.endDate! + 'T00:00:00');\n      \n      const startFormatted = format(startDate, 'MMM d');\n      const endFormatted = format(endDate, 'MMM d');\n      \n      return `${startFormatted} - ${endFormatted}`;\n    } catch {\n      return '';\n    }\n  };\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      {...attributes}\n      {...listeners}\n      onClick={handleClick}\n      className={cn(\n        'px-2 py-1 rounded text-xs font-medium text-white cursor-move hover:shadow-sm transition-all duration-200 mb-1 select-none',\n        eventTypeColors[event.type],\n        isDragging || isDragActive ? 'cursor-grabbing' : 'cursor-grab'\n      )}\n      data-testid={`event-card-${event.id}`}\n    >\n      <div className=\"truncate\" title={event.title}>\n        {event.title}\n      </div>\n      {event.startTime && !isMultiDay && (\n        <div className=\"text-xs opacity-90\">\n          {event.startTime}\n          {event.endTime && ` - ${event.endTime}`}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":2509},"client/src/components/EventDetailsModal.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useCalendarStore } from '@/stores/calendarStore';\nimport { Event, EventType } from '@shared/schema';\nimport { useToast } from '@/hooks/use-toast';\nimport { X, Edit, Trash2, Calendar, Clock, Tag, Check, X as XIcon } from 'lucide-react';\nimport { format } from 'date-fns';\n\ninterface EventDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onEdit?: (event: Event) => void;\n}\n\nconst eventTypeColors: Record<EventType, string> = {\n  PLANNING: '#07182D',\n  MEETING: '#02C8FF',\n  MONTHLY_REVIEW: '#FF007F',\n  HOLIDAYS: '#FF9000',\n  QBR: '#ec4899',\n};\n\nconst eventTypeLabels: Record<EventType, string> = {\n  PLANNING: 'Planning',\n  MEETING: 'Meeting',\n  MONTHLY_REVIEW: 'Monthly Review',\n  HOLIDAYS: 'Holidays',\n  QBR: 'QBR',\n};\n\nexport function EventDetailsModal({ isOpen, onClose, onEdit }: EventDetailsModalProps) {\n  const { selectedEvent, deleteEvent, updateEvent, isLoading } = useCalendarStore();\n  const { toast } = useToast();\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isEditingCategory, setIsEditingCategory] = useState(false);\n  const [newCategory, setNewCategory] = useState<EventType>(selectedEvent?.type || 'MEETING');\n\n  if (!selectedEvent) return null;\n\n  const handleDelete = async () => {\n    try {\n      setIsDeleting(true);\n      await deleteEvent(selectedEvent.id);\n      \n      toast({\n        title: 'Event deleted',\n        description: 'The event has been deleted successfully.',\n      });\n      \n      onClose();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to delete event. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsDeleting(false);\n    }\n  };\n\n  const handleEdit = () => {\n    onEdit?.(selectedEvent);\n    onClose();\n  };\n\n  const handleCategoryEdit = () => {\n    setNewCategory(selectedEvent.type);\n    setIsEditingCategory(true);\n  };\n\n  const handleCategorySave = async () => {\n    try {\n      await updateEvent(selectedEvent.id, { type: newCategory });\n      \n      toast({\n        title: 'Category updated',\n        description: `Event category changed to ${eventTypeLabels[newCategory]}.`,\n      });\n      \n      setIsEditingCategory(false);\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to update category. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleCategoryCancel = () => {\n    setNewCategory(selectedEvent.type);\n    setIsEditingCategory(false);\n  };\n\n  const formatDate = (startDateStr: string, endDateStr?: string) => {\n    try {\n      const startDate = new Date(startDateStr + 'T00:00:00');\n      const formattedStart = format(startDate, 'EEEE, MMMM d, yyyy');\n      \n      if (endDateStr && endDateStr !== startDateStr) {\n        const endDate = new Date(endDateStr + 'T00:00:00');\n        const formattedEnd = format(endDate, 'EEEE, MMMM d, yyyy');\n        return `${formattedStart} - ${formattedEnd}`;\n      }\n      \n      return formattedStart;\n    } catch {\n      return startDateStr;\n    }\n  };\n\n  const formatTime = (startTime?: string, endTime?: string) => {\n    if (!startTime) return 'All day';\n    \n    const formatTimeStr = (timeStr: string) => {\n      const [hours, minutes] = timeStr.split(':');\n      const hour24 = parseInt(hours);\n      const hour12 = hour24 === 0 ? 12 : hour24 > 12 ? hour24 - 12 : hour24;\n      const ampm = hour24 >= 12 ? 'PM' : 'AM';\n      return `${hour12}:${minutes} ${ampm}`;\n    };\n\n    const start = formatTimeStr(startTime);\n    if (endTime) {\n      const end = formatTimeStr(endTime);\n      return `${start} - ${end}`;\n    }\n    return start;\n  };\n\n  // Check if this is a multi-day event\n  const isMultiDay = selectedEvent.endDate && selectedEvent.endDate !== selectedEvent.date;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <div \n                className=\"w-4 h-4 rounded-full mr-3\"\n                style={{ backgroundColor: eventTypeColors[selectedEvent.type] }}\n              />\n              <DialogTitle className=\"text-xl font-bold text-gray-800\">\n                {selectedEvent.title}\n              </DialogTitle>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleEdit}\n                className=\"h-8 w-8 text-gray-400 hover:text-[#02C8FF]\"\n                data-testid=\"button-edit-event\"\n              >\n                <Edit className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleDelete}\n                disabled={isDeleting}\n                className=\"h-8 w-8 text-gray-400 hover:text-red-500\"\n                data-testid=\"button-delete-event\"\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onClose}\n                className=\"h-8 w-8 text-gray-400 hover:text-gray-600\"\n                data-testid=\"close-details-modal\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-4 pt-2\">\n          <div className=\"flex items-center text-gray-600\">\n            <Calendar className=\"mr-3 w-4 h-4\" />\n            <span data-testid=\"event-date\">\n              {formatDate(selectedEvent.date, selectedEvent.endDate)}\n            </span>\n          </div>\n\n          {!isMultiDay && (\n            <div className=\"flex items-center text-gray-600\">\n              <Clock className=\"mr-3 w-4 h-4\" />\n              <span data-testid=\"event-time\">\n                {formatTime(selectedEvent.startTime, selectedEvent.endTime)}\n              </span>\n            </div>\n          )}\n\n          <div className=\"flex items-center text-gray-600\">\n            <Tag className=\"mr-3 w-4 h-4\" />\n            <span className=\"font-medium\">Category:</span>\n            {isEditingCategory ? (\n              <div className=\"flex items-center space-x-2 ml-2\">\n                <Select value={newCategory} onValueChange={(value: EventType) => setNewCategory(value)}>\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Object.entries(eventTypeLabels).map(([key, label]) => (\n                      <SelectItem key={key} value={key}>\n                        <div className=\"flex items-center space-x-2\">\n                          <div \n                            className=\"w-3 h-3 rounded\"\n                            style={{ backgroundColor: eventTypeColors[key as EventType] }}\n                          />\n                          <span>{label}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={handleCategorySave}\n                  data-testid=\"button-save-category\"\n                  className=\"h-6 w-6 p-0\"\n                >\n                  <Check className=\"w-3 h-3\" />\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={handleCategoryCancel}\n                  data-testid=\"button-cancel-category\"\n                  className=\"h-6 w-6 p-0\"\n                >\n                  <XIcon className=\"w-3 h-3\" />\n                </Button>\n              </div>\n            ) : (\n              <div className=\"flex items-center space-x-2 ml-2\">\n                <span \n                  className=\"px-2 py-1 rounded text-white text-sm\"\n                  style={{ backgroundColor: eventTypeColors[selectedEvent.type] }}\n                  data-testid=\"event-type\"\n                >\n                  {eventTypeLabels[selectedEvent.type]}\n                </span>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={handleCategoryEdit}\n                  data-testid=\"button-edit-category\"\n                  className=\"h-6 w-6 p-0 hover:bg-gray-100\"\n                >\n                  <Edit className=\"w-3 h-3\" />\n                </Button>\n              </div>\n            )}\n          </div>\n\n          {selectedEvent.notes && (\n            <div className=\"pt-4 border-t border-gray-200\">\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Notes</h4>\n              <p \n                className=\"text-sm text-gray-600 leading-relaxed\"\n                data-testid=\"event-notes\"\n              >\n                {selectedEvent.notes}\n              </p>\n            </div>\n          )}\n\n          <div className=\"flex space-x-3 mt-6 pt-4 border-t border-gray-200\">\n            <Button\n              onClick={onClose}\n              variant=\"outline\"\n              className=\"flex-1 px-4 py-2 text-gray-600 border-gray-200 hover:bg-gray-50\"\n              data-testid=\"button-close-details\"\n            >\n              Close\n            </Button>\n            {onEdit && (\n              <Button\n                onClick={() => onEdit(selectedEvent)}\n                variant=\"default\"\n                className=\"flex-1 px-4 py-2 bg-[#02C8FF] hover:bg-[#0299CC] text-white\"\n                data-testid=\"button-edit-event\"\n              >\n                <Edit className=\"w-4 h-4 mr-2\" />\n                Edit\n              </Button>\n            )}\n            <Button\n              onClick={handleDelete}\n              disabled={isDeleting || isLoading}\n              variant=\"destructive\"\n              className=\"flex-1 px-4 py-2 bg-red-500 hover:bg-red-600 text-white\"\n              data-testid=\"button-delete-event\"\n            >\n              {isDeleting ? (\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                  <span>Deleting...</span>\n                </div>\n              ) : (\n                <div className=\"flex items-center space-x-2\">\n                  <Trash2 className=\"w-4 h-4\" />\n                  <span>Delete</span>\n                </div>\n              )}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10997},"client/src/components/EventDetailsViewerModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { useCalendarStore } from '@/stores/calendarStore';\nimport { EventType } from '@shared/schema';\nimport { X, Calendar, Clock, Tag } from 'lucide-react';\nimport { format } from 'date-fns';\n\ninterface EventDetailsViewerModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst eventTypeColors: Record<EventType, string> = {\n  PLANNING: '#07182D',\n  MEETING: '#02C8FF',\n  MONTHLY_REVIEW: '#FF007F',\n  HOLIDAYS: '#FF9000',\n};\n\nconst eventTypeLabels: Record<EventType, string> = {\n  PLANNING: 'Planning',\n  MEETING: 'Meeting',\n  MONTHLY_REVIEW: 'Monthly Review',\n  HOLIDAYS: 'Holidays',\n};\n\nexport function EventDetailsViewerModal({ isOpen, onClose }: EventDetailsViewerModalProps) {\n  const { selectedEvent } = useCalendarStore();\n\n  if (!selectedEvent) return null;\n\n  const formatDate = (dateStr: string) => {\n    try {\n      return format(new Date(dateStr), 'EEEE, MMMM d, yyyy');\n    } catch {\n      return dateStr;\n    }\n  };\n\n  const formatTime = (timeStr: string) => {\n    if (!timeStr) return '';\n    try {\n      const [hours, minutes] = timeStr.split(':');\n      const date = new Date();\n      date.setHours(parseInt(hours), parseInt(minutes));\n      return format(date, 'h:mm a');\n    } catch {\n      return timeStr;\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-xl font-bold text-gray-800\">\n              Event Details\n            </DialogTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className=\"h-6 w-6 text-gray-400 hover:text-gray-600\"\n              data-testid=\"close-details-modal\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div>\n            <h3 \n              className=\"text-lg font-semibold text-gray-900 mb-3\"\n              data-testid=\"event-title\"\n            >\n              {selectedEvent.title}\n            </h3>\n          </div>\n\n          <div className=\"flex items-center text-gray-600\">\n            <Calendar className=\"mr-3 w-4 h-4\" />\n            <div>\n              <span data-testid=\"event-start-date\">\n                {formatDate(selectedEvent.date)}\n              </span>\n              {selectedEvent.endDate && selectedEvent.endDate !== selectedEvent.date && (\n                <span className=\"text-gray-500\">\n                  {' '} → {' '}\n                  <span data-testid=\"event-end-date\">\n                    {formatDate(selectedEvent.endDate)}\n                  </span>\n                </span>\n              )}\n            </div>\n          </div>\n\n          {(selectedEvent.startTime || selectedEvent.endTime) && (\n            <div className=\"flex items-center text-gray-600\">\n              <Clock className=\"mr-3 w-4 h-4\" />\n              <span data-testid=\"event-time\">\n                {selectedEvent.startTime && formatTime(selectedEvent.startTime)}\n                {selectedEvent.startTime && selectedEvent.endTime && ' - '}\n                {selectedEvent.endTime && formatTime(selectedEvent.endTime)}\n              </span>\n            </div>\n          )}\n\n          <div className=\"flex items-center text-gray-600\">\n            <Tag className=\"mr-3 w-4 h-4\" />\n            <span className=\"font-medium\">Category:</span>\n            <span \n              className=\"px-2 py-1 rounded text-white text-sm ml-2\"\n              style={{ backgroundColor: eventTypeColors[selectedEvent.type] }}\n              data-testid=\"event-type\"\n            >\n              {eventTypeLabels[selectedEvent.type]}\n            </span>\n          </div>\n\n          {selectedEvent.notes && (\n            <div className=\"pt-4 border-t border-gray-200\">\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Notes</h4>\n              <p \n                className=\"text-sm text-gray-600 leading-relaxed\"\n                data-testid=\"event-notes\"\n              >\n                {selectedEvent.notes}\n              </p>\n            </div>\n          )}\n\n          <div className=\"flex justify-center mt-6 pt-4 border-t border-gray-200\">\n            <Button\n              onClick={onClose}\n              variant=\"outline\"\n              className=\"px-6 py-2 text-gray-600 border-gray-200 hover:bg-gray-50\"\n              data-testid=\"button-close-details\"\n            >\n              Close\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4770},"client/src/components/Sidebar.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { useCalendarStore } from '@/stores/calendarStore';\nimport { parseNaturalLanguage } from '@/lib/dateParser';\nimport { useToast } from '@/hooks/use-toast';\nimport { EventType } from '@shared/schema';\nimport { Plus, Search, Download, Upload, Menu, PlusCircle, FileText, Calendar, Grid3X3, LayoutGrid, List, AlertTriangle } from 'lucide-react';\nimport BulkPasteImporter from '@/components/BulkPasteImporter';\nimport { DataRecoveryButton } from '@/components/DataRecoveryButton';\n\ninterface SidebarProps {\n  onCreateEvent: () => void;\n  onExport: () => void;\n  onImport: () => void;\n  onExportPptxTable: () => void;\n  onExportPptxMonthGrid: () => void;\n  onExportPptxQuarterGrid: () => void;\n  onBulkImport?: (events: any[]) => Promise<void>;\n}\n\nconst eventTypeColors: Record<EventType, string> = {\n  PLANNING: '#2563eb',\n  MEETING: '#dc2626',\n  MONTHLY_REVIEW: '#000000',\n  HOLIDAYS: '#FF9000',\n  QBR: '#ec4899',\n};\n\nconst eventTypeLabels: Record<EventType, string> = {\n  PLANNING: 'PI Planning',\n  MEETING: 'Sprint Start',\n  MONTHLY_REVIEW: 'FY Week',\n  HOLIDAYS: 'Holidays',\n  QBR: 'QBR',\n};\n\nexport function Sidebar({ onCreateEvent, onExport, onImport, onExportPptxTable, onExportPptxMonthGrid, onExportPptxQuarterGrid, onBulkImport }: SidebarProps) {\n  const {\n    viewMode,\n    setViewMode,\n    searchQuery,\n    setSearchQuery,\n    filterType,\n    setFilterType,\n    createEvent,\n    events,\n    getEventsByType,\n  } = useCalendarStore();\n  \n  const { toast } = useToast();\n  const [quickAddInput, setQuickAddInput] = useState('');\n  const [isQuickAdding, setIsQuickAdding] = useState(false);\n\n  const handleQuickAdd = async () => {\n    if (!quickAddInput.trim()) return;\n\n    setIsQuickAdding(true);\n    try {\n      const parsed = parseNaturalLanguage(quickAddInput);\n      \n      if (!parsed) {\n        toast({\n          title: 'Parse Error',\n          description: 'Could not parse the event text. Try a format like \"Team Meeting on Nov 15 2-4pm\"',\n          variant: 'destructive',\n        });\n        return;\n      }\n\n      await createEvent({\n        title: parsed.title,\n        type: parsed.type || 'MEETING',\n        date: parsed.date,\n        startTime: parsed.startTime,\n        endTime: parsed.endTime,\n      });\n\n      toast({\n        title: 'Event created',\n        description: `\"${parsed.title}\" has been added to your calendar.`,\n      });\n\n      setQuickAddInput('');\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to create event. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsQuickAdding(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleQuickAdd();\n    }\n  };\n\n  const getEventCountForType = (type: EventType) => {\n    return getEventsByType(type).length;\n  };\n\n  return (\n    <aside className=\"w-full lg:w-80 bg-white shadow-sm border-r border-gray-200 flex-shrink-0\">\n      <div className=\"p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <h1 className=\"text-2xl font-bold text-gray-800\">Calendar</h1>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"lg:hidden p-2 rounded-lg hover:bg-gray-100\"\n            data-testid=\"mobile-menu-toggle\"\n          >\n            <Menu className=\"text-gray-600\" />\n          </Button>\n        </div>\n\n        {/* Data Recovery */}\n        <div className=\"mb-8 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n          <div className=\"flex items-center mb-2\">\n            <AlertTriangle className=\"w-4 h-4 text-yellow-600 mr-2\" />\n            <h3 className=\"text-sm font-medium text-yellow-800\">Data Recovery</h3>\n          </div>\n          <p className=\"text-xs text-yellow-700 mb-3\">\n            Lost events after database migration? Click to recover them from your browser storage.\n          </p>\n          <DataRecoveryButton />\n        </div>\n\n        {/* Quick Add Event */}\n        <div className=\"mb-8\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n            Quick Add Event\n          </label>\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"e.g., PI Planning on 15 Oct 9-11am\"\n              className=\"w-full px-4 py-3 pr-12 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#02C8FF] focus:border-[#02C8FF] transition-all duration-200 text-sm\"\n              value={quickAddInput}\n              onChange={(e) => setQuickAddInput(e.target.value)}\n              onKeyPress={handleKeyPress}\n              disabled={isQuickAdding}\n              data-testid=\"input-quick-add\"\n            />\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleQuickAdd}\n              disabled={isQuickAdding || !quickAddInput.trim()}\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[#02C8FF] hover:text-[#07182D] transition-colors\"\n              data-testid=\"button-quick-add\"\n            >\n              <PlusCircle className=\"text-lg\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Bulk Import Section */}\n        {onBulkImport && (\n          <div className=\"mb-6\">\n            <div className=\"mb-4\">\n              <h3 className=\"text-sm font-semibold text-gray-700 mb-2\">Bulk Import</h3>\n              <BulkPasteImporter onImport={onBulkImport} />\n            </div>\n          </div>\n        )}\n\n        {/* Event Categories */}\n        <div className=\"mb-8\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n            Event Categories\n          </label>\n          <div className=\"space-y-2\">\n            {Object.entries(eventTypeLabels).map(([type, label]) => (\n              <button\n                key={type}\n                onClick={() => setFilterType(filterType === type ? 'all' : type as EventType)}\n                className={`flex items-center justify-between p-3 rounded-lg border transition-colors cursor-pointer w-full ${\n                  filterType === type\n                    ? 'border-[#02C8FF] bg-blue-50'\n                    : 'border-gray-200 hover:bg-gray-50'\n                }`}\n                data-testid={`filter-${type.toLowerCase()}`}\n              >\n                <div className=\"flex items-center\">\n                  <div \n                    className=\"w-3 h-3 rounded-full mr-3\"\n                    style={{ backgroundColor: eventTypeColors[type as EventType] }}\n                  />\n                  <span className=\"text-sm font-medium\">{label}</span>\n                </div>\n                <span \n                  className=\"text-xs text-gray-500\"\n                  data-testid={`count-${type.toLowerCase()}`}\n                >\n                  {getEventCountForType(type as EventType)}\n                </span>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Search */}\n        <div className=\"mb-6\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n            Search Events\n          </label>\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search by title or keyword...\"\n              className=\"w-full px-4 py-3 pl-10 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#02C8FF] focus:border-[#02C8FF] transition-all duration-200 text-sm\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-search\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"space-y-3\">\n          <Button\n            onClick={onCreateEvent}\n            className=\"w-full px-4 py-3 bg-[#02C8FF] text-white rounded-xl hover:bg-opacity-90 transition-all duration-200 font-medium text-sm\"\n            data-testid=\"button-create-event\"\n          >\n            <Plus className=\"mr-2 w-4 h-4\" />\n            Create Event\n          </Button>\n          \n          <div className=\"space-y-3\">\n            <div className=\"grid grid-cols-2 gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={onExport}\n                className=\"px-3 py-2 border border-gray-200 text-gray-600 rounded-lg hover:bg-gray-50 transition-colors text-sm font-medium\"\n                data-testid=\"button-export\"\n              >\n                <Download className=\"mr-2 w-4 h-4\" />\n                JSON\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={onImport}\n                className=\"px-3 py-2 border border-gray-200 text-gray-600 rounded-lg hover:bg-gray-50 transition-colors text-sm font-medium\"\n                data-testid=\"button-import\"\n              >\n                <Upload className=\"mr-2 w-4 h-4\" />\n                Import\n              </Button>\n            </div>\n            \n            <div className=\"border-t border-gray-200 pt-3\">\n              <label className=\"block text-xs font-medium text-gray-500 mb-2 uppercase tracking-wide\">\n                PowerPoint Export\n              </label>\n              <div className=\"space-y-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={onExportPptxTable}\n                  className=\"w-full px-3 py-2 border border-gray-200 text-gray-600 rounded-lg hover:bg-gray-50 transition-colors text-sm font-medium\"\n                  data-testid=\"button-export-pptx-table\"\n                >\n                  <FileText className=\"mr-2 w-4 h-4\" />\n                  Table Format\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={onExportPptxMonthGrid}\n                  className=\"w-full px-3 py-2 border border-gray-200 text-gray-600 rounded-lg hover:bg-gray-50 transition-colors text-sm font-medium\"\n                  data-testid=\"button-export-pptx-month\"\n                >\n                  <Calendar className=\"mr-2 w-4 h-4\" />\n                  Monthly Grid\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={onExportPptxQuarterGrid}\n                  className=\"w-full px-3 py-2 border border-gray-200 text-gray-600 rounded-lg hover:bg-gray-50 transition-colors text-sm font-medium\"\n                  data-testid=\"button-export-pptx-quarter\"\n                >\n                  <LayoutGrid className=\"mr-2 w-4 h-4\" />\n                  Quarterly Grid\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* View Mode Switch */}\n        <div className=\"mt-6 pt-6 border-t border-gray-200\">\n          <a \n            href=\"/viewer\"\n            className=\"w-full flex items-center justify-center px-3 py-2 text-sm text-gray-600 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n          >\n            <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n            </svg>\n            Switch to View-Only Mode\n          </a>\n        </div>\n\n        {/* Stats */}\n        <div className=\"mt-6 pt-6 border-t border-gray-200\">\n          <div className=\"flex items-center text-sm text-gray-600\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\" />\n            <span data-testid=\"total-events\">\n              {events.length} events\n            </span>\n            <span className=\"mx-2\">•</span>\n            <span className=\"text-xs\">Stored locally</span>\n          </div>\n        </div>\n      </div>\n      \n\n    </aside>\n  );\n}\n","size_bytes":12225},"client/src/components/ViewerSidebar.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { useCalendarStore } from '@/stores/calendarStore';\nimport { EventType } from '@shared/schema';\nimport { Search, Download, Menu, FileText, Calendar, LayoutGrid } from 'lucide-react';\n\ninterface ViewerSidebarProps {\n  onExport: () => void;\n  onExportPptxTable: () => void;\n  onExportPptxMonthGrid: () => void;\n  onExportPptxQuarterGrid: () => void;\n}\n\nconst eventTypeColors: Record<EventType, string> = {\n  PLANNING: '#2563eb',\n  MEETING: '#dc2626',\n  MONTHLY_REVIEW: '#000000',\n  HOLIDAYS: '#FF9000',\n};\n\nconst eventTypeLabels: Record<EventType, string> = {\n  PLANNING: 'PI Planning',\n  MEETING: 'Sprint Start',\n  MONTHLY_REVIEW: 'FY Week',\n  HOLIDAYS: 'Holidays',\n};\n\nexport function ViewerSidebar({ onExport, onExportPptxTable, onExportPptxMonthGrid, onExportPptxQuarterGrid }: ViewerSidebarProps) {\n  const {\n    searchQuery,\n    setSearchQuery,\n    filterType,\n    setFilterType,\n    events,\n    getEventsByType,\n  } = useCalendarStore();\n\n  const getEventCountForType = (type: EventType) => {\n    return getEventsByType(type).length;\n  };\n\n  return (\n    <aside className=\"w-full lg:w-80 bg-white shadow-sm border-r border-gray-200 flex-shrink-0\">\n      <div className=\"p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-800\">Calendar View</h1>\n            <p className=\"text-sm text-gray-600\">Read-only mode</p>\n          </div>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"lg:hidden p-2 rounded-lg hover:bg-gray-100\"\n            data-testid=\"mobile-menu-toggle\"\n          >\n            <Menu className=\"text-gray-600\" />\n          </Button>\n        </div>\n\n        {/* Event Categories */}\n        <div className=\"mb-8\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n            Event Categories\n          </label>\n          <div className=\"space-y-2\">\n            {Object.entries(eventTypeLabels).map(([type, label]) => (\n              <button\n                key={type}\n                onClick={() => setFilterType(filterType === type ? 'all' : type as EventType)}\n                className={`flex items-center justify-between p-3 rounded-lg border transition-colors cursor-pointer w-full ${\n                  filterType === type\n                    ? 'border-[#02C8FF] bg-blue-50'\n                    : 'border-gray-200 hover:bg-gray-50'\n                }`}\n                data-testid={`filter-${type.toLowerCase()}`}\n              >\n                <div className=\"flex items-center\">\n                  <div \n                    className=\"w-3 h-3 rounded-full mr-3\"\n                    style={{ backgroundColor: eventTypeColors[type as EventType] }}\n                  />\n                  <span className=\"text-sm font-medium\">{label}</span>\n                </div>\n                <span \n                  className=\"text-xs text-gray-500\"\n                  data-testid={`count-${type.toLowerCase()}`}\n                >\n                  {getEventCountForType(type as EventType)}\n                </span>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Search */}\n        <div className=\"mb-6\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n            Search Events\n          </label>\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search by title or keyword...\"\n              className=\"w-full px-4 py-3 pl-10 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#02C8FF] focus:border-[#02C8FF] transition-all duration-200 text-sm\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-search\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          </div>\n        </div>\n\n        {/* Export Actions */}\n        <div className=\"space-y-3 mb-6\">\n          <h3 className=\"text-sm font-medium text-gray-700\">Export Options</h3>\n          \n          <div className=\"space-y-3\">\n            <Button\n              variant=\"outline\"\n              onClick={onExport}\n              className=\"w-full px-3 py-2 border border-gray-200 text-gray-600 rounded-lg hover:bg-gray-50 transition-colors text-sm font-medium\"\n              data-testid=\"button-export\"\n            >\n              <Download className=\"mr-2 w-4 h-4\" />\n              Export JSON\n            </Button>\n            \n            <div className=\"border-t border-gray-200 pt-3\">\n              <label className=\"block text-xs font-medium text-gray-500 mb-2 uppercase tracking-wide\">\n                PowerPoint Export\n              </label>\n              <div className=\"space-y-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={onExportPptxTable}\n                  className=\"w-full px-3 py-2 border border-gray-200 text-gray-600 rounded-lg hover:bg-gray-50 transition-colors text-sm font-medium\"\n                  data-testid=\"button-export-pptx-table\"\n                >\n                  <FileText className=\"mr-2 w-4 h-4\" />\n                  Table Format\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={onExportPptxMonthGrid}\n                  className=\"w-full px-3 py-2 border border-gray-200 text-gray-600 rounded-lg hover:bg-gray-50 transition-colors text-sm font-medium\"\n                  data-testid=\"button-export-pptx-month\"\n                >\n                  <Calendar className=\"mr-2 w-4 h-4\" />\n                  Monthly Grid\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={onExportPptxQuarterGrid}\n                  className=\"w-full px-3 py-2 border border-gray-200 text-gray-600 rounded-lg hover:bg-gray-50 transition-colors text-sm font-medium\"\n                  data-testid=\"button-export-pptx-quarter\"\n                >\n                  <LayoutGrid className=\"mr-2 w-4 h-4\" />\n                  Quarterly Grid\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Switch to Admin Mode */}\n        <div className=\"pt-6 border-t border-gray-200\">\n          <a \n            href=\"/\"\n            className=\"w-full flex items-center justify-center px-4 py-3 text-sm bg-[#02C8FF] text-white rounded-lg hover:bg-[#0299CC] transition-colors font-medium\"\n            data-testid=\"link-admin-mode\"\n          >\n            <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n            </svg>\n            Switch to Admin Mode\n          </a>\n        </div>\n\n        {/* Stats */}\n        <div className=\"mt-6 pt-6 border-t border-gray-200\">\n          <div className=\"flex items-center text-sm text-gray-600\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\" />\n            <span data-testid=\"total-events\">\n              {events.length} events\n            </span>\n            <span className=\"mx-2\">•</span>\n            <span className=\"text-xs\">Stored locally</span>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}","size_bytes":7585},"client/src/constants/colors.ts":{"content":"export const TYPE_COLORS = {\n  PLANNING: \"#2563eb\",\n  MEETING: \"#dc2626\",\n  MONTHLY_REVIEW: \"#000000\",\n  HOLIDAYS: \"#FF9000\",\n  QBR: \"#ec4899\",\n};","size_bytes":146},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/bulkParser.ts":{"content":"import * as chrono from \"chrono-node\";\nimport {\n  parse as parseExact, formatISO, addDays, eachDayOfInterval, isAfter, isBefore\n} from \"date-fns\";\nimport { EventType } from '@shared/schema';\n\nconst OPERATING_START = new Date(\"2025-08-01\"); // Operating Year 2025-26\nconst OPERATING_END   = new Date(\"2026-07-31\");\n\nexport interface BulkEvent {\n  type: EventType;\n  title: string;\n  date: string;\n  startDate?: string;\n  endDate?: string;\n}\n\n// Heuristic type guesser\nfunction guessType(titleRaw: string): EventType {\n  const t = titleRaw.toLowerCase();\n  if (t.includes(\"monthly review\")) return \"MONTHLY_REVIEW\";\n  if (t.includes(\"holiday\") || t.includes(\"annual leave\") || t.includes(\"pto\")) return \"HOLIDAYS\";\n  if (t.includes(\"meeting\") || t.includes(\"review\") || t.includes(\"alignment\") || t.includes(\"kickoff\")) return \"MEETING\";\n  return \"PLANNING\";\n}\n\nfunction cleanTitle(s: string): string {\n  return s.replace(/\\s*\\([^)]+\\)\\s*$/,\"\").trim(); // drop trailing (Wed-Thu) etc.\n}\n\n/**\n * Parse a line like:\n *  - \"PI Planning Kickoff July 1, 2025 (Tue)\"\n *  - \"Product Mngt Leader Review July 9-10, 2025 (Wed-Thu)\"\n *  - \"PI Planning Session (2-day workshop) Week of July 21-24, 2025 (Mon-Thu)\"\n *  - \"Commit Documentation Week of July 28 - Aug 1, 2025 (Mon-Fri)\"\n * Returns array of events (one per day for ranges)\n */\nexport function parseLineToEvents(line: string): BulkEvent[] {\n  const raw = line.trim();\n  if (!raw) return [];\n\n  // Normalize en-dash/em-dash/spaces around hyphens\n  let s = raw.replace(/[–—]/g, \"-\").replace(/\\s*-\\s*/g, \" - \");\n\n  // Drop day-of-week parentheses anywhere\n  s = s.replace(/\\([^)]+\\)/g, \"\").trim();\n\n  // Detect \"Week of\" block (treat like a range)\n  const weekOf = /week of\\s+/i.test(s);\n  let titlePart = s;\n  let datePart = s;\n\n  // If there is an obvious month name, split title vs date by first month token\n  const monthRegex = /\\b(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|january|february|march|april|may|june|july|august|september|october|november|december)\\b/i;\n  const m = s.match(monthRegex);\n  if (m) {\n    const idx = s.toLowerCase().indexOf(m[0].toLowerCase());\n    titlePart = cleanTitle(s.slice(0, idx));\n    datePart = s.slice(idx);\n  } else {\n    // fallback: try whole string\n    titlePart = cleanTitle(s);\n  }\n\n  // Prefer explicit ranges like \"July 9-10, 2025\" or \"July 28 - Aug 1, 2025\"\n  const range1 = /([a-zA-Z]+)\\s+(\\d{1,2})\\s*-\\s*([a-zA-Z]+)?\\s*(\\d{1,2}),\\s*(\\d{4})/; // Jul 28 - Aug 1, 2025\n  const range2 = /([a-zA-Z]+)\\s+(\\d{1,2})-(\\d{1,2}),\\s*(\\d{4})/; // July 9-10, 2025\n\n  let dates: Date[] = [];\n\n  try {\n    if (range1.test(datePart)) {\n      const r = datePart.match(range1);\n      if (r) {\n        const m1 = r[1]; const d1 = r[2]; const m2 = r[3] || r[1]; const d2 = r[4]; const yyyy = r[5];\n        const start = parseExact(`${m1} ${d1}, ${yyyy}`, \"LLLL d, yyyy\", new Date());\n        const end   = parseExact(`${m2} ${d2}, ${yyyy}`, \"LLLL d, yyyy\", new Date());\n        dates = eachDayOfInterval({ start, end });\n      }\n    } else if (range2.test(datePart)) {\n      const r = datePart.match(range2);\n      if (r) {\n        const m = r[1]; const d1 = r[2]; const d2 = r[3]; const yyyy = r[4];\n        const start = parseExact(`${m} ${d1}, ${yyyy}`, \"LLLL d, yyyy\", new Date());\n        const end   = parseExact(`${m} ${d2}, ${yyyy}`, \"LLLL d, yyyy\", new Date());\n        dates = eachDayOfInterval({ start, end });\n      }\n    } else if (weekOf) {\n      // e.g., \"Week of July 21-24, 2025\" or \"Week of July 28 - Aug 1, 2025\"\n      // Strip \"week of\"\n      const after = datePart.replace(/week of\\s+/i, \"\");\n      // Try the same range matchers\n      if (range1.test(after)) {\n        const r = after.match(range1);\n        if (r) {\n          const m1 = r[1]; const d1 = r[2]; const m2 = r[3] || r[1]; const d2 = r[4]; const yyyy = r[5];\n          const start = parseExact(`${m1} ${d1}, ${yyyy}`, \"LLLL d, yyyy\", new Date());\n          const end   = parseExact(`${m2} ${d2}, ${yyyy}`, \"LLLL d, yyyy\", new Date());\n          dates = eachDayOfInterval({ start, end });\n        }\n      } else if (range2.test(after)) {\n        const r = after.match(range2);\n        if (r) {\n          const m = r[1]; const d1 = r[2]; const d2 = r[3]; const yyyy = r[4];\n          const start = parseExact(`${m} ${d1}, ${yyyy}`, \"LLLL d, yyyy\", new Date());\n          const end   = parseExact(`${m} ${d2}, ${yyyy}`, \"LLLL d, yyyy\", new Date());\n          dates = eachDayOfInterval({ start, end });\n        }\n      } else {\n        // fallback: let chrono find a single date, expand 5 business days\n        const d = chrono.parseDate(after);\n        if (d) {\n          // Mon-Fri starting from parsed date\n          const start = d;\n          const end = addDays(start, 4);\n          dates = eachDayOfInterval({ start, end });\n        }\n      }\n    } else {\n      // Single date: let chrono handle \"July 1, 2025\"\n      const d = chrono.parseDate(datePart);\n      if (d) dates = [d];\n    }\n  } catch (error) {\n    console.warn('Date parsing error:', error);\n    return [];\n  }\n\n  const title = cleanTitle(titlePart) || \"Event\";\n  const type = guessType(title);\n\n  // For multi-day events, return with startDate and endDate\n  if (dates.length > 1) {\n    const startDate = formatISO(dates[0], { representation: \"date\" });\n    const endDate = formatISO(dates[dates.length - 1], { representation: \"date\" });\n    \n    return [{\n      type,\n      title,\n      date: startDate, // Primary date for storage\n      startDate,\n      endDate\n    }];\n  } else {\n    // Single day event\n    return dates.map((d) => ({\n      type,\n      title,\n      date: formatISO(d, { representation: \"date\" }),\n    }));\n  }\n}\n\n/**\n * Parse many lines → events; optionally clip to operating window.\n */\nexport function parseBulkText(text: string, { clipToOperatingYear = true } = {}): BulkEvent[] {\n  const all = text\n    .split(/\\r?\\n/)\n    .flatMap(parseLineToEvents)\n    .filter(Boolean);\n\n  if (!clipToOperatingYear) return all;\n\n  return all.filter(({ date }) => {\n    const d = new Date(date);\n    return !isBefore(d, OPERATING_START) && !isAfter(d, OPERATING_END);\n  });\n}","size_bytes":6121},"client/src/lib/dateParser.ts":{"content":"import { parse } from 'date-fns';\n\n// Helper function to format date safely without timezone issues\nexport function formatDateSafe(date: Date): string {\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const day = date.getDate().toString().padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\nexport interface ParsedEvent {\n  title: string;\n  date: string;\n  endDate?: string;\n  startTime?: string;\n  endTime?: string;\n  type?: 'PLANNING' | 'MEETING' | 'MONTHLY_REVIEW' | 'HOLIDAYS';\n}\n\nexport function parseNaturalLanguage(input: string): ParsedEvent | null {\n  const cleanInput = input.trim().toLowerCase();\n  \n  // Extract event type from common keywords\n  let type: 'PLANNING' | 'MEETING' | 'MONTHLY_REVIEW' | 'HOLIDAYS' | undefined;\n  if (cleanInput.includes('planning') || cleanInput.includes('pi planning') || cleanInput.includes('qbr planning')) {\n    type = 'PLANNING';\n  } else if (cleanInput.includes('monthly review') || cleanInput.includes('month review') || cleanInput.includes('monthly')) {\n    type = 'MONTHLY_REVIEW';\n  } else if (cleanInput.includes('meeting') || cleanInput.includes('standup') || cleanInput.includes('review') || cleanInput.includes('retrospective') || cleanInput.includes('qbr')) {\n    type = 'MEETING';\n  } else if (cleanInput.includes('holiday') || cleanInput.includes('vacation') || cleanInput.includes('thanksgiving') || cleanInput.includes('veterans') || cleanInput.includes('christmas')) {\n    type = 'HOLIDAYS';\n  }\n\n  // Extract date range patterns first (e.g., \"15-17 Oct\", \"Dec 1-3\", \"12/1-12/3\")\n  const dateRangePatterns = [\n    /(\\d{1,2})\\s*-\\s*(\\d{1,2})\\s+(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n    /(\\d{1,2})\\/(\\d{1,2})\\s*-\\s*(\\d{1,2})\\/(\\d{1,2})/,\n    /(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\s+(\\d{1,2})\\s*-\\s*(\\d{1,2})/i,\n  ];\n\n  // Extract single date patterns\n  const datePatterns = [\n    /(\\d{1,2})\\s+(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n    /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/,\n    /(\\d{1,2})\\/(\\d{1,2})/,\n    /(today|tomorrow)/i,\n    /(monday|tuesday|wednesday|thursday|friday|saturday|sunday)/i,\n  ];\n\n  let parsedDate: string | null = null;\n  let parsedEndDate: string | null = null;\n  const today = new Date();\n\n  // Check for date ranges first\n  for (const pattern of dateRangePatterns) {\n    const match = cleanInput.match(pattern);\n    if (match) {\n      const year = today.getFullYear();\n      const monthMap: { [key: string]: number } = {\n        jan: 0, feb: 1, mar: 2, apr: 3, may: 4, jun: 5,\n        jul: 6, aug: 7, sep: 8, oct: 9, nov: 10, dec: 11\n      };\n\n      if (match[3] && match[1] && match[2]) {\n        // Pattern: \"15-17 Oct\"\n        const month = monthMap[match[3].toLowerCase()];\n        if (month !== undefined) {\n          const startDay = parseInt(match[1]);\n          const endDay = parseInt(match[2]);\n          const monthStr = (month + 1).toString().padStart(2, '0');\n          parsedDate = `${year}-${monthStr}-${startDay.toString().padStart(2, '0')}`;\n          parsedEndDate = `${year}-${monthStr}-${endDay.toString().padStart(2, '0')}`;\n        }\n      } else if (match[1] && match[2] && match[3] && match[4]) {\n        // Pattern: \"12/1-12/3\" \n        const startMonth = parseInt(match[1]);\n        const startDay = parseInt(match[2]);\n        const endMonth = parseInt(match[3]);\n        const endDay = parseInt(match[4]);\n        parsedDate = `${year}-${startMonth.toString().padStart(2, '0')}-${startDay.toString().padStart(2, '0')}`;\n        parsedEndDate = `${year}-${endMonth.toString().padStart(2, '0')}-${endDay.toString().padStart(2, '0')}`;\n      } else if (match[1] && match[2] && match[3]) {\n        // Pattern: \"Oct 15-17\"\n        const month = monthMap[match[1].toLowerCase()];\n        if (month !== undefined) {\n          const startDay = parseInt(match[2]);\n          const endDay = parseInt(match[3]);\n          const monthStr = (month + 1).toString().padStart(2, '0');\n          parsedDate = `${year}-${monthStr}-${startDay.toString().padStart(2, '0')}`;\n          parsedEndDate = `${year}-${monthStr}-${endDay.toString().padStart(2, '0')}`;\n        }\n      }\n      break;\n    }\n  }\n\n  // If no date range found, check for single dates\n  if (!parsedDate) {\n  \n    for (const pattern of datePatterns) {\n      const match = cleanInput.match(pattern);\n      if (match) {\n        if (match[0].toLowerCase() === 'today') {\n          parsedDate = formatDateSafe(today);\n        } else if (match[0].toLowerCase() === 'tomorrow') {\n          const tomorrow = new Date(today);\n          tomorrow.setDate(tomorrow.getDate() + 1);\n          parsedDate = formatDateSafe(tomorrow);\n        } else if (match[1] && match[2]) {\n          // Handle \"15 Oct\" format\n          const monthMap: { [key: string]: number } = {\n            jan: 0, feb: 1, mar: 2, apr: 3, may: 4, jun: 5,\n            jul: 6, aug: 7, sep: 8, oct: 9, nov: 10, dec: 11\n          };\n          const month = monthMap[match[2].toLowerCase()];\n          if (month !== undefined) {\n            const year = today.getFullYear();\n            const day = parseInt(match[1]);\n            // Create date string directly to avoid timezone issues\n            const monthStr = (month + 1).toString().padStart(2, '0');\n            const dayStr = day.toString().padStart(2, '0');\n            parsedDate = `${year}-${monthStr}-${dayStr}`;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  // Extract time patterns\n  const timePatterns = [\n    /(\\d{1,2})\\s*-\\s*(\\d{1,2})\\s*(am|pm)?/i,\n    /(\\d{1,2}):(\\d{2})\\s*-\\s*(\\d{1,2}):(\\d{2})/,\n    /(\\d{1,2})\\s*(am|pm)/i,\n  ];\n\n  let startTime: string | undefined;\n  let endTime: string | undefined;\n\n  for (const pattern of timePatterns) {\n    const match = cleanInput.match(pattern);\n    if (match) {\n      if (match[3] && match[1] && match[2]) {\n        // Format like \"2-4pm\" or \"9-11am\"\n        const isPM = match[3].toLowerCase() === 'pm';\n        let start = parseInt(match[1]);\n        let end = parseInt(match[2]);\n        \n        if (isPM && start !== 12) start += 12;\n        if (isPM && end !== 12) end += 12;\n        \n        startTime = `${start.toString().padStart(2, '0')}:00`;\n        endTime = `${end.toString().padStart(2, '0')}:00`;\n      } else if (match[1] && match[2]) {\n        // Format like \"9am\"\n        let hour = parseInt(match[1]);\n        const isPM = match[2] && match[2].toLowerCase() === 'pm';\n        if (isPM && hour !== 12) hour += 12;\n        startTime = `${hour.toString().padStart(2, '0')}:00`;\n      }\n      break;\n    }\n  }\n\n  // Extract title (everything before the date/time info)\n  let title = input;\n  if (parsedDate) {\n    // Remove date references from title\n    title = title.replace(/\\s+(on|at)?\\s+\\d{1,2}\\s+(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i, '');\n    title = title.replace(/\\s+(today|tomorrow)/i, '');\n    title = title.replace(/\\s+\\d{1,2}\\/\\d{1,2}(\\/\\d{4})?/i, '');\n  }\n  if (startTime || endTime) {\n    // Remove time references from title\n    title = title.replace(/\\s+\\d{1,2}\\s*-\\s*\\d{1,2}\\s*(am|pm)?/i, '');\n    title = title.replace(/\\s+\\d{1,2}:\\d{2}\\s*-\\s*\\d{1,2}:\\d{2}/i, '');\n    title = title.replace(/\\s+\\d{1,2}\\s*(am|pm)/i, '');\n  }\n\n  title = title.trim();\n\n  if (!title || !parsedDate) {\n    return null;\n  }\n\n  return {\n    title,\n    date: parsedDate,\n    endDate: parsedEndDate,\n    startTime,\n    endTime,\n    type,\n  };\n}\n","size_bytes":7407},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/storage.ts":{"content":"import { Event, InsertEvent } from '@shared/schema';\nimport { apiRequest } from './queryClient';\n\nclass ApiCalendarStorage {\n  async createEvent(eventData: InsertEvent): Promise<Event> {\n    const res = await apiRequest('POST', '/api/events', eventData);\n    return await res.json();\n  }\n\n  async getEvent(id: string): Promise<Event | undefined> {\n    try {\n      const res = await apiRequest('GET', `/api/events/${id}`);\n      return await res.json();\n    } catch (error: any) {\n      if (error.message.includes('404')) {\n        return undefined;\n      }\n      throw error;\n    }\n  }\n\n  async getAllEvents(): Promise<Event[]> {\n    const res = await apiRequest('GET', '/api/events');\n    return await res.json();\n  }\n\n  async getEventsByDateRange(startDate: string, endDate: string): Promise<Event[]> {\n    const res = await apiRequest('GET', `/api/events/range/${startDate}/${endDate}`);\n    return await res.json();\n  }\n\n  async getEventsByType(type: string): Promise<Event[]> {\n    const res = await apiRequest('GET', `/api/events/type/${type}`);\n    return await res.json();\n  }\n\n  async updateEvent(id: string, updates: Partial<Event>): Promise<Event> {\n    const res = await apiRequest('PUT', `/api/events/${id}`, updates);\n    return await res.json();\n  }\n\n  async deleteEvent(id: string): Promise<void> {\n    await apiRequest('DELETE', `/api/events/${id}`);\n  }\n\n  async searchEvents(query: string): Promise<Event[]> {\n    // For now, get all events and filter client-side\n    // In the future, this could be optimized with a server-side search endpoint\n    const allEvents = await this.getAllEvents();\n    const lowerQuery = query.toLowerCase();\n    \n    return allEvents.filter(event => \n      event.title.toLowerCase().includes(lowerQuery) ||\n      (event.notes && event.notes.toLowerCase().includes(lowerQuery))\n    );\n  }\n\n  async exportEvents(): Promise<Event[]> {\n    return await this.getAllEvents();\n  }\n\n  async importEvents(events: Event[]): Promise<void> {\n    // Import events one by one to the database\n    for (const event of events) {\n      // Remove timestamps since they'll be set by the server\n      const { id, createdAt, updatedAt, ...eventData } = event;\n      await this.createEvent(eventData);\n    }\n  }\n\n  async clearAll(): Promise<void> {\n    // Get all events and delete them one by one\n    const events = await this.getAllEvents();\n    for (const event of events) {\n      await this.deleteEvent(event.id);\n    }\n  }\n}\n\nexport const storage = new ApiCalendarStorage();","size_bytes":2505},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/CalendarPage.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Calendar } from \"@/components/Calendar\";\nimport { Sidebar } from \"@/components/Sidebar\";\nimport { CreateEventModal } from \"@/components/CreateEventModal\";\nimport { EventDetailsModal } from \"@/components/EventDetailsModal\";\nimport { useCalendarStore } from \"@/stores/calendarStore\";\nimport { Event, InsertEvent, EventType } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  exportPptxTable,\n  exportPptxMonthGrid,\n  exportPptxQuarterGrid,\n} from \"@/utils/exportPptx\";\nimport { BulkEvent } from \"@/utils/bulkParse\";\n\nexport default function CalendarPage() {\n  const {\n    loadEvents,\n    setSelectedEvent,\n    exportEvents,\n    importEvents,\n    events,\n    createEvent,\n  } = useCalendarStore();\n  const { toast } = useToast();\n\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\n  const [createModalDefaultDate, setCreateModalDefaultDate] =\n    useState<string>(\"\");\n  const [editingEvent, setEditingEvent] = useState<Event | null>(null);\n\n  useEffect(() => {\n    loadEvents();\n  }, [loadEvents]);\n\n  const handleEventClick = (event: Event) => {\n    setSelectedEvent(event);\n    setIsDetailsModalOpen(true);\n  };\n\n  const handleDateClick = (date: string) => {\n    setCreateModalDefaultDate(date);\n    setIsCreateModalOpen(true);\n  };\n\n  const handleExport = async () => {\n    try {\n      await exportEvents();\n      toast({\n        title: \"Export successful\",\n        description: \"Events exported successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export failed\",\n        description: \"Failed to export events\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleImport = () => {\n    // TODO: Implement import functionality\n    toast({\n      title: \"Import\",\n      description: \"Import functionality to be implemented\",\n    });\n  };\n\n  const handleExportPptxTable = async () => {\n    try {\n      await exportPptxTable({ events });\n      toast({\n        title: \"PowerPoint export successful\",\n        description: \"Table view exported to PowerPoint\",\n      });\n    } catch (error) {\n      toast({\n        title: \"PowerPoint export failed\",\n        description: \"Failed to export to PowerPoint\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleExportPptxMonthGrid = async () => {\n    try {\n      await exportPptxMonthGrid({ events });\n      toast({\n        title: \"PowerPoint export successful\",\n        description: \"Month grid exported to PowerPoint\",\n      });\n    } catch (error) {\n      toast({\n        title: \"PowerPoint export failed\",\n        description: \"Failed to export to PowerPoint\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleExportPptxQuarterGrid = async () => {\n    try {\n      await exportPptxQuarterGrid({ events });\n      toast({\n        title: \"PowerPoint export successful\",\n        description: \"Quarter grid exported to PowerPoint\",\n      });\n    } catch (error) {\n      toast({\n        title: \"PowerPoint export failed\",\n        description: \"Failed to export to PowerPoint\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBulkImport = async (bulkEvents: BulkEvent[]) => {\n    try {\n      for (const bulkEvent of bulkEvents) {\n        const eventData: InsertEvent = {\n          title: bulkEvent.title,\n          notes: \"\",\n          date: bulkEvent.date,\n          type: bulkEvent.type as EventType,\n        };\n        await createEvent(eventData);\n      }\n      toast({\n        title: \"Bulk import successful\",\n        description: `${bulkEvents.length} events imported successfully`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Bulk import failed\",\n        description: \"Failed to import events\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col lg:flex-row bg-gray-50\">\n      <Sidebar\n        onCreateEvent={() => setIsCreateModalOpen(true)}\n        onExport={handleExport}\n        onImport={handleImport}\n        onExportPptxTable={handleExportPptxTable}\n        onExportPptxMonthGrid={handleExportPptxMonthGrid}\n        onExportPptxQuarterGrid={handleExportPptxQuarterGrid}\n        onBulkImport={handleBulkImport}\n      />\n      \n      <Calendar\n        onEventClick={handleEventClick}\n        onDateClick={handleDateClick}\n      />\n      \n      <CreateEventModal\n        isOpen={isCreateModalOpen}\n        onClose={() => {\n          setIsCreateModalOpen(false);\n          setEditingEvent(null);\n        }}\n        defaultDate={createModalDefaultDate}\n        editingEvent={editingEvent}\n      />\n\n      <EventDetailsModal \n        isOpen={isDetailsModalOpen}\n        onClose={() => setIsDetailsModalOpen(false)}\n        onEdit={(event) => { \n          setEditingEvent(event);\n          setCreateModalDefaultDate(event.date);\n          setIsCreateModalOpen(true);\n          setIsDetailsModalOpen(false);\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":5034},"client/src/pages/CalendarViewerPage.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useCalendarStore } from '@/stores/calendarStore';\nimport { Calendar } from '@/components/Calendar';\nimport { EventDetailsViewerModal } from '../components/EventDetailsViewerModal';\nimport { ViewerSidebar } from '@/components/ViewerSidebar';\nimport { Event } from '@shared/schema';\nimport { useToast } from '@/hooks/use-toast';\nimport { exportPptxTable, exportPptxMonthGrid, exportPptxQuarterGrid } from '@/utils/exportPptx';\n\nexport default function CalendarViewerPage() {\n  const { loadEvents, setSelectedEvent, exportEvents, events } = useCalendarStore();\n  const { toast } = useToast();\n  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\n\n  useEffect(() => {\n    loadEvents();\n  }, [loadEvents]);\n\n  const handleEventClick = (event: Event) => {\n    setSelectedEvent(event);\n    setIsDetailsModalOpen(true);\n  };\n\n  // Disable date clicks in viewer mode\n  const handleDateClick = () => {\n    // No action for viewers\n  };\n\n  const handleExport = async () => {\n    try {\n      const jsonData = await exportEvents();\n      const blob = new Blob([jsonData], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `calendar-export-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      \n      toast({\n        title: 'Export successful',\n        description: 'Your calendar has been exported successfully.',\n      });\n    } catch (error) {\n      toast({\n        title: 'Export failed',\n        description: 'Failed to export calendar. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleExportPptxTable = async () => {\n    try {\n      exportPptxTable({ \n        events, \n        fileName: `calendar-table-${new Date().toISOString().split('T')[0]}.pptx` \n      });\n      \n      toast({\n        title: 'PowerPoint table export successful',\n        description: 'Your calendar table presentation has been generated and downloaded.',\n      });\n    } catch (error) {\n      toast({\n        title: 'PowerPoint export failed',\n        description: 'Failed to generate PowerPoint presentation. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleExportPptxMonthGrid = async () => {\n    try {\n      exportPptxMonthGrid({ \n        events, \n        fileName: `calendar-monthly-${new Date().toISOString().split('T')[0]}.pptx` \n      });\n      \n      toast({\n        title: 'PowerPoint monthly grid export successful',\n        description: 'Your monthly calendar grid presentation has been generated and downloaded.',\n      });\n    } catch (error) {\n      toast({\n        title: 'PowerPoint export failed',\n        description: 'Failed to generate PowerPoint presentation. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleExportPptxQuarterGrid = async () => {\n    try {\n      exportPptxQuarterGrid({ \n        events, \n        fileName: `calendar-quarterly-${new Date().toISOString().split('T')[0]}.pptx` \n      });\n      \n      toast({\n        title: 'PowerPoint quarterly grid export successful',\n        description: 'Your quarterly calendar grid presentation has been generated and downloaded.',\n      });\n    } catch (error) {\n      toast({\n        title: 'PowerPoint export failed',\n        description: 'Failed to generate PowerPoint presentation. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col lg:flex-row bg-gray-50\">\n      <ViewerSidebar\n        onExport={handleExport}\n        onExportPptxTable={handleExportPptxTable}\n        onExportPptxMonthGrid={handleExportPptxMonthGrid}\n        onExportPptxQuarterGrid={handleExportPptxQuarterGrid}\n      />\n      \n      <Calendar\n        onEventClick={handleEventClick}\n        onDateClick={handleDateClick}\n        viewerMode={true}\n      />\n      \n      <EventDetailsViewerModal \n        isOpen={isDetailsModalOpen} \n        onClose={() => setIsDetailsModalOpen(false)} \n      />\n    </div>\n  );\n}","size_bytes":4229},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/stores/calendarStore.ts":{"content":"import { create } from 'zustand';\nimport { Event, EventType, InsertEvent } from '@shared/schema';\nimport { storage } from '@/lib/storage';\nimport { startOfMonth, endOfMonth, format } from 'date-fns';\n\ninterface CalendarState {\n  events: Event[];\n  currentDate: Date;\n  viewMode: 'month' | 'week' | 'day';\n  selectedEvent: Event | null;\n  searchQuery: string;\n  filterType: EventType | 'all';\n  isLoading: boolean;\n  error: string | null;\n\n  // Actions\n  setCurrentDate: (date: Date) => void;\n  setViewMode: (mode: 'month' | 'week' | 'day') => void;\n  setSelectedEvent: (event: Event | null) => void;\n  setSearchQuery: (query: string) => void;\n  setFilterType: (type: EventType | 'all') => void;\n  \n  // Event operations\n  loadEvents: () => Promise<void>;\n  createEvent: (event: InsertEvent) => Promise<void>;\n  createEventsBulk: (events: InsertEvent[]) => Promise<void>;\n  updateEvent: (id: string, updates: Partial<Event>) => Promise<void>;\n  deleteEvent: (id: string) => Promise<void>;\n  searchEvents: (query: string) => Promise<void>;\n  \n  // Export/Import\n  exportEvents: () => Promise<string>;\n  importEvents: (jsonData: string) => Promise<void>;\n  \n  // Getters\n  getEventsForDate: (date: string) => Event[];\n  getEventsByType: (type: EventType) => Event[];\n  getFilteredEvents: () => Event[];\n  isEventOnDate: (event: Event, date: string) => boolean;\n}\n\nexport const useCalendarStore = create<CalendarState>((set, get) => ({\n  events: [],\n  currentDate: new Date(2025, 0, 15), // Set to January 2025 to show Q2 with existing events\n  viewMode: 'month',\n  selectedEvent: null,\n  searchQuery: '',\n  filterType: 'all',\n  isLoading: false,\n  error: null,\n\n  setCurrentDate: (date) => set({ currentDate: date }),\n  setViewMode: (mode) => set({ viewMode: mode }),\n  setSelectedEvent: (event) => set({ selectedEvent: event }),\n  setSearchQuery: (query) => set({ searchQuery: query }),\n  setFilterType: (type) => set({ filterType: type }),\n\n  loadEvents: async () => {\n    set({ isLoading: true, error: null });\n    try {\n      const events = await storage.getAllEvents();\n      set({ events, isLoading: false });\n    } catch (error) {\n      set({ error: 'Failed to load events', isLoading: false });\n      console.error('Error loading events:', error);\n    }\n  },\n\n  createEvent: async (eventData) => {\n    set({ isLoading: true, error: null });\n    try {\n      const newEvent = await storage.createEvent(eventData);\n      set(state => ({ \n        events: [...state.events, newEvent],\n        isLoading: false \n      }));\n    } catch (error) {\n      set({ error: 'Failed to create event', isLoading: false });\n      console.error('Error creating event:', error);\n      throw error;\n    }\n  },\n\n  createEventsBulk: async (eventDataArray: InsertEvent[]) => {\n    set({ isLoading: true, error: null });\n    try {\n      const newEvents: Event[] = [];\n      for (const eventData of eventDataArray) {\n        const newEvent = await storage.createEvent(eventData);\n        newEvents.push(newEvent);\n      }\n      set(state => ({ \n        events: [...state.events, ...newEvents],\n        isLoading: false \n      }));\n    } catch (error) {\n      set({ error: 'Failed to create events', isLoading: false });\n      console.error('Error creating events:', error);\n      throw error;\n    }\n  },\n\n  updateEvent: async (id, updates) => {\n    set({ isLoading: true, error: null });\n    try {\n      const updatedEvent = await storage.updateEvent(id, updates);\n      set(state => ({\n        events: state.events.map(e => e.id === id ? updatedEvent : e),\n        selectedEvent: state.selectedEvent?.id === id ? updatedEvent : state.selectedEvent,\n        isLoading: false\n      }));\n    } catch (error) {\n      set({ error: 'Failed to update event', isLoading: false });\n      console.error('Error updating event:', error);\n      throw error;\n    }\n  },\n\n  deleteEvent: async (id) => {\n    set({ isLoading: true, error: null });\n    try {\n      await storage.deleteEvent(id);\n      set(state => ({\n        events: state.events.filter(e => e.id !== id),\n        selectedEvent: state.selectedEvent?.id === id ? null : state.selectedEvent,\n        isLoading: false\n      }));\n    } catch (error) {\n      set({ error: 'Failed to delete event', isLoading: false });\n      console.error('Error deleting event:', error);\n      throw error;\n    }\n  },\n\n  searchEvents: async (query) => {\n    set({ searchQuery: query });\n  },\n\n  exportEvents: async () => {\n    try {\n      const events = await storage.exportEvents();\n      const exportData = {\n        events,\n        exportedAt: new Date().toISOString(),\n        version: '1.0',\n      };\n      return JSON.stringify(exportData, null, 2);\n    } catch (error) {\n      console.error('Error exporting events:', error);\n      throw new Error('Failed to export events');\n    }\n  },\n\n  importEvents: async (jsonData) => {\n    try {\n      const data = JSON.parse(jsonData);\n      if (data.events && Array.isArray(data.events)) {\n        await storage.importEvents(data.events);\n        await get().loadEvents(); // Reload events\n      } else {\n        throw new Error('Invalid import format');\n      }\n    } catch (error) {\n      console.error('Error importing events:', error);\n      throw new Error('Failed to import events');\n    }\n  },\n\n  isEventOnDate: (event, date) => {\n    // Check if event occurs on the given date\n    const eventDate = new Date(event.date + 'T00:00:00');\n    const checkDate = new Date(date + 'T00:00:00');\n    \n    // Single day event\n    if (!event.endDate) {\n      return event.date === date;\n    }\n    \n    // Multi-day event - check if date falls within range\n    const endDate = new Date(event.endDate + 'T00:00:00');\n    return checkDate >= eventDate && checkDate <= endDate;\n  },\n\n  getEventsForDate: (date) => {\n    const { events, isEventOnDate } = get();\n    return events.filter(event => isEventOnDate(event, date));\n  },\n\n  getEventsByType: (type) => {\n    const { events } = get();\n    return events.filter(event => event.type === type);\n  },\n\n  getFilteredEvents: () => {\n    const { events, searchQuery, filterType } = get();\n    let filtered = events;\n\n    if (filterType !== 'all') {\n      filtered = filtered.filter(event => event.type === filterType);\n    }\n\n    if (searchQuery.trim()) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(event =>\n        event.title.toLowerCase().includes(query) ||\n        (event.notes && event.notes.toLowerCase().includes(query))\n      );\n    }\n\n    return filtered;\n  },\n}));\n","size_bytes":6509},"client/src/utils/addPIEvents.ts":{"content":"import { useCalendarStore } from '@/stores/calendarStore';\nimport { InsertEvent } from '@shared/schema';\n\nexport const addPIPlanningEvents = async (): Promise<void> => {\n  const events = [\n    { title: \"PI Planning Kickoff\", date: \"2025-07-01\", type: \"planning\" as const },\n    { title: \"Requirements Gathering\", date: \"2025-07-08\", type: \"planning\" as const },\n    { title: \"Product Mngt Leader Review\", date: \"2025-07-09\", startDate: \"2025-07-09\", endDate: \"2025-07-10\", type: \"meeting\" as const },\n    { title: \"Product Mngt Alignment Meeting\", date: \"2025-07-17\", type: \"meeting\" as const },\n    { title: \"Product Mngt Feature Pre-socialization with Eng/D&R\", date: \"2025-07-21\", startDate: \"2025-07-21\", endDate: \"2025-07-24\", type: \"planning\" as const },\n    { title: \"PI Planning Session (2-day workshop)\", date: \"2025-07-21\", startDate: \"2025-07-21\", endDate: \"2025-07-24\", type: \"planning\" as const },\n    { title: \"Commit Documentation\", date: \"2025-07-28\", startDate: \"2025-07-28\", endDate: \"2025-08-01\", type: \"planning\" as const },\n    { title: \"SLT Commit Review\", date: \"2025-08-06\", type: \"meeting\" as const },\n    { title: \"Jira Align Updates\", date: \"2025-08-07\", startDate: \"2025-08-07\", endDate: \"2025-08-08\", type: \"planning\" as const }\n  ];\n\n  const { createEvent } = useCalendarStore.getState();\n  \n  for (const event of events) {\n    await createEvent(event as InsertEvent);\n  }\n  \n  console.log(`Added ${events.length} PI Planning events successfully`);\n};","size_bytes":1481},"client/src/utils/bulkEventCreator.ts":{"content":"import { InsertEvent } from '@shared/schema';\nimport { useCalendarStore } from '@/stores/calendarStore';\n\ninterface PIEvent {\n  title: string;\n  date?: string;\n  startDate?: string;\n  endDate?: string;\n  type: 'planning' | 'meeting';\n}\n\nexport const createPIPlanningEvents = async (): Promise<void> => {\n  const piEvents: PIEvent[] = [\n    {\n      title: \"PI Planning Kickoff\",\n      date: \"2025-07-01\",\n      type: \"planning\"\n    },\n    {\n      title: \"Requirements Gathering\",\n      date: \"2025-07-08\",\n      type: \"planning\"\n    },\n    {\n      title: \"Product Mngt Leader Review\",\n      startDate: \"2025-07-09\",\n      endDate: \"2025-07-10\",\n      type: \"meeting\"\n    },\n    {\n      title: \"Product Mngt Alignment Meeting\",\n      date: \"2025-07-17\",\n      type: \"meeting\"\n    },\n    {\n      title: \"Product Mngt Feature Pre-socialization with Eng/D&R\",\n      startDate: \"2025-07-21\",\n      endDate: \"2025-07-24\",\n      type: \"planning\"\n    },\n    {\n      title: \"PI Planning Session (2-day workshop)\",\n      startDate: \"2025-07-21\",\n      endDate: \"2025-07-24\",\n      type: \"planning\"\n    },\n    {\n      title: \"Commit Documentation\",\n      startDate: \"2025-07-28\",\n      endDate: \"2025-08-01\",\n      type: \"planning\"\n    },\n    {\n      title: \"SLT Commit Review\",\n      date: \"2025-08-06\",\n      type: \"meeting\"\n    },\n    {\n      title: \"Jira Align Updates\",\n      startDate: \"2025-08-07\",\n      endDate: \"2025-08-08\",\n      type: \"planning\"\n    }\n  ];\n\n  // Convert to InsertEvent format\n  const insertEvents: InsertEvent[] = piEvents.map(event => {\n    const base = {\n      title: event.title,\n      type: event.type as 'planning' | 'meeting'\n    };\n    \n    if (event.startDate && event.endDate) {\n      return {\n        ...base,\n        date: event.startDate, // Use startDate as the main date\n        startDate: event.startDate,\n        endDate: event.endDate\n      } as InsertEvent;\n    } else {\n      return {\n        ...base,\n        date: event.date!\n      } as InsertEvent;\n    }\n  });\n\n  // Add events one by one using the store\n  const { createEvent } = useCalendarStore.getState();\n  for (const event of insertEvents) {\n    await createEvent(event);\n  }\n  \n  console.log(`Successfully added ${insertEvents.length} PI Planning events`);\n};","size_bytes":2255},"client/src/utils/bulkParse.ts":{"content":"import * as chrono from \"chrono-node\";\nimport {\n  parse as parseExact, formatISO, addDays, eachDayOfInterval, isAfter, isBefore\n} from \"date-fns\";\n\nconst OPERATING_START = new Date(\"2025-08-01\"); // Operating Year 2025-26\nconst OPERATING_END   = new Date(\"2026-07-31\");\n\nexport interface BulkEvent {\n  type: string;\n  title: string;\n  date: string;\n  startDate?: string;\n  endDate?: string;\n}\n\n// Heuristic type guesser\nfunction guessType(titleRaw: string): string {\n  const t = titleRaw.toLowerCase();\n  if (t.includes(\"monthly review\")) return \"MONTHLY_REVIEW\";\n  if (t.includes(\"holiday\") || t.includes(\"annual leave\") || t.includes(\"pto\")) return \"HOLIDAYS\";\n  if (t.includes(\"meeting\") || t.includes(\"review\") || t.includes(\"alignment\") || t.includes(\"kickoff\")) return \"MEETING\";\n  return \"PLANNING\";\n}\n\nfunction cleanTitle(s: string): string {\n  return s.replace(/\\s*\\([^)]+\\)\\s*$/,\"\").trim(); // drop trailing (Wed-Thu) etc.\n}\n\n/**\n * Parse a line like:\n *  - \"PI Planning Kickoff July 1, 2025 (Tue)\"\n *  - \"Product Mngt Leader Review July 9-10, 2025 (Wed-Thu)\"\n *  - \"PI Planning Session (2-day workshop) Week of July 21-24, 2025 (Mon-Thu)\"\n *  - \"Commit Documentation Week of July 28 - Aug 1, 2025 (Mon-Fri)\"\n * Returns array of events\n */\nexport function parseLineToEvents(line: string): BulkEvent[] {\n  const raw = line.trim();\n  if (!raw) return [];\n\n  // Normalize en-dash/em-dash/spaces around hyphens\n  let s = raw.replace(/[–—]/g, \"-\").replace(/\\s*-\\s*/g, \" - \");\n\n  // Drop day-of-week parentheses anywhere\n  s = s.replace(/\\([^)]+\\)/g, \"\").trim();\n\n  // Detect \"Week of\" block (treat like a range)\n  const weekOf = /week of\\s+/i.test(s);\n  let titlePart = s;\n  let datePart = s;\n\n  // If there is an obvious month name, split title vs date by first month token\n  const monthRegex = /\\b(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|january|february|march|april|may|june|july|august|september|october|november|december)\\b/i;\n  const m = s.match(monthRegex);\n  if (m) {\n    const idx = s.toLowerCase().indexOf(m[0].toLowerCase());\n    titlePart = cleanTitle(s.slice(0, idx));\n    datePart = s.slice(idx);\n  } else {\n    // fallback: try whole string\n    titlePart = cleanTitle(s);\n  }\n\n  // Prefer explicit ranges like \"July 9-10, 2025\" or \"July 28 - Aug 1, 2025\"\n  const range1 = /([a-zA-Z]+)\\s+(\\d{1,2})\\s*-\\s*([a-zA-Z]+)?\\s*(\\d{1,2}),\\s*(\\d{4})/; // Jul 28 - Aug 1, 2025\n  const range2 = /([a-zA-Z]+)\\s+(\\d{1,2})-(\\d{1,2}),\\s*(\\d{4})/; // July 9-10, 2025\n\n  let dates: Date[] = [];\n\n  try {\n    if (range1.test(datePart)) {\n      const r = datePart.match(range1);\n      if (r) {\n        const m1 = r[1]; const d1 = r[2]; const m2 = r[3] || r[1]; const d2 = r[4]; const yyyy = r[5];\n        const start = parseExact(`${m1} ${d1}, ${yyyy}`, \"LLLL d, yyyy\", new Date());\n        const end   = parseExact(`${m2} ${d2}, ${yyyy}`, \"LLLL d, yyyy\", new Date());\n        dates = eachDayOfInterval({ start, end });\n      }\n    } else if (range2.test(datePart)) {\n      const r = datePart.match(range2);\n      if (r) {\n        const m = r[1]; const d1 = r[2]; const d2 = r[3]; const yyyy = r[4];\n        const start = parseExact(`${m} ${d1}, ${yyyy}`, \"LLLL d, yyyy\", new Date());\n        const end   = parseExact(`${m} ${d2}, ${yyyy}`, \"LLLL d, yyyy\", new Date());\n        dates = eachDayOfInterval({ start, end });\n      }\n    } else if (weekOf) {\n      // e.g., \"Week of July 21-24, 2025\" or \"Week of July 28 - Aug 1, 2025\"\n      // Strip \"week of\"\n      const after = datePart.replace(/week of\\s+/i, \"\");\n      // Try the same range matchers\n      if (range1.test(after)) {\n        const r = after.match(range1);\n        if (r) {\n          const m1 = r[1]; const d1 = r[2]; const m2 = r[3] || r[1]; const d2 = r[4]; const yyyy = r[5];\n          const start = parseExact(`${m1} ${d1}, ${yyyy}`, \"LLLL d, yyyy\", new Date());\n          const end   = parseExact(`${m2} ${d2}, ${yyyy}`, \"LLLL d, yyyy\", new Date());\n          dates = eachDayOfInterval({ start, end });\n        }\n      } else if (range2.test(after)) {\n        const r = after.match(range2);\n        if (r) {\n          const m = r[1]; const d1 = r[2]; const d2 = r[3]; const yyyy = r[4];\n          const start = parseExact(`${m} ${d1}, ${yyyy}`, \"LLLL d, yyyy\", new Date());\n          const end   = parseExact(`${m} ${d2}, ${yyyy}`, \"LLLL d, yyyy\", new Date());\n          dates = eachDayOfInterval({ start, end });\n        }\n      } else {\n        // fallback: let chrono find a single date, expand 5 business days\n        const d = chrono.parseDate(after);\n        if (d) {\n          // Mon-Fri starting from parsed date\n          const start = d;\n          const end = addDays(start, 4);\n          dates = eachDayOfInterval({ start, end });\n        }\n      }\n    } else {\n      // Single date: let chrono handle \"July 1, 2025\"\n      const d = chrono.parseDate(datePart);\n      if (d) dates = [d];\n    }\n  } catch (error) {\n    console.warn('Date parsing error:', error);\n    return [];\n  }\n\n  const title = cleanTitle(titlePart) || \"Event\";\n  const type = guessType(title);\n\n  // For multi-day events, return with startDate and endDate\n  if (dates.length > 1) {\n    const startDate = formatISO(dates[0], { representation: \"date\" });\n    const endDate = formatISO(dates[dates.length - 1], { representation: \"date\" });\n    \n    return [{\n      type,\n      title,\n      date: startDate, // Primary date for storage\n      startDate,\n      endDate\n    }];\n  } else {\n    // Single day event\n    return dates.map((d) => ({\n      type,\n      title,\n      date: formatISO(d, { representation: \"date\" }),\n    }));\n  }\n}\n\n/**\n * Parse many lines → events; optionally clip to operating window.\n */\nexport function parseBulkText(text: string, { clipToOperatingYear = true } = {}): BulkEvent[] {\n  const all = text\n    .split(/\\r?\\n/)\n    .flatMap(parseLineToEvents)\n    .filter(Boolean);\n\n  if (!clipToOperatingYear) return all;\n\n  return all.filter(({ date }) => {\n    const d = new Date(date);\n    return !isBefore(d, OPERATING_START) && !isAfter(d, OPERATING_END);\n  });\n}","size_bytes":6046},"client/src/utils/exportPptx.ts":{"content":"import PptxGenJS from \"pptxgenjs\";\nimport { TYPE_COLORS } from \"../constants/colors\";\nimport { Event, EventType } from \"@shared/schema\";\n\n/** Public API **/\nexport function exportPptxTable({ events, fileName = \"calendar-2025-26-table.pptx\" }: { events: Event[], fileName?: string }) {\n  const pptx = new PptxGenJS();\n  addTitle(pptx, \"Operating Year Calendar 2025–26\", \"Table per Month\");\n  for (const month of iterateOperatingMonths()) {\n    addMonthTableSlide(pptx, month, events);\n  }\n  pptx.writeFile({ fileName });\n}\n\nexport function exportPptxMonthGrid({ events, fileName = \"calendar-2025-26-month-grid.pptx\" }: { events: Event[], fileName?: string }) {\n  const pptx = new PptxGenJS();\n  addTitle(pptx, \"Operating Year Calendar 2025–26\", \"Monthly Calendar Grid (Mon–Sun)\");\n  for (const month of iterateOperatingMonths()) {\n    addMonthGridSlide(pptx, month, events);\n  }\n  pptx.writeFile({ fileName });\n}\n\nexport function exportPptxQuarterGrid({ events, fileName = \"calendar-2025-26-quarter-grid.pptx\" }: { events: Event[], fileName?: string }) {\n  const pptx = new PptxGenJS();\n  addTitle(pptx, \"Operating Year Calendar 2025–26\", \"Quarterly Calendar Grid (Mon–Sun)\");\n  const quarters = operatingYearQuarters(); // 4 quarters of 3 months each starting Aug\n  for (const q of quarters) {\n    addQuarterGridSlide(pptx, q, events);\n  }\n  pptx.writeFile({ fileName });\n}\n\n// Legacy function for backward compatibility\nexport function exportToPptx({ events, fileName = \"calendar-2025-26.pptx\" }: { events: Event[], fileName?: string }) {\n  return exportPptxTable({ events, fileName });\n}\n\n/** Slides: title **/\nfunction addTitle(pptx: any, main: string, sub: string) {\n  const s = pptx.addSlide();\n  s.addText(main, { x: 0.7, y: 1.2, fontSize: 28, bold: true });\n  s.addText(sub, { x: 0.7, y: 1.9, fontSize: 16 });\n}\n\n/** Slide: month TABLE **/\nfunction addMonthTableSlide(pptx: any, month: any, events: Event[]) {\n  const s = pptx.addSlide();\n  s.addText(month.label, { x: 0.5, y: 0.4, fontSize: 22, bold: true });\n\n  const items = eventsForMonth(events, month.year, month.monthIdx);\n  const rows = [\n    [\n      { text: \"Date\", options: { bold: true } },\n      { text: \"Type\", options: { bold: true } },\n      { text: \"Title\", options: { bold: true } },\n    ],\n    ...items.map((e: any) => [\n      formatDate(e.date),\n      prettyType(e.type),\n      { text: e.title || \"\", options: { color: TYPE_COLORS[e.type as EventType] || \"000000\" } },\n    ]),\n  ];\n\n  s.addTable(rows, {\n    x: 0.5,\n    y: 1.0,\n    w: 9.0,\n    colW: [1.4, 2.2, 5.4],\n    border: { type: \"none\" },\n    margin: 2,\n    fontSize: 14,\n    fill: { color: \"FFFFFF\" },\n  });\n}\n\n/** Slide: month GRID **/\nfunction addMonthGridSlide(pptx: any, month: any, events: Event[]) {\n  const s = pptx.addSlide();\n  s.addText(month.label, { x: 0.5, y: 0.3, fontSize: 22, bold: true });\n\n  const matrix = monthMatrix(month.year, month.monthIdx, 1); // Monday = 1\n  const itemsByDay = bucketEventsByISODate(events);\n\n  // Layout (16:9 default 10 x 5.625 inches)\n  const marginX = 0.4;\n  const marginY = 0.9;\n  const gridW = 9.2;\n  const gridH = 4.4;\n  const cols = 7;\n  const rows = 6; // 6 weeks\n  const cellW = gridW / cols;\n  const cellH = gridH / rows;\n\n  // Weekday headers\n  const weekdays = [\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\"];\n  weekdays.forEach((wd, i) => {\n    s.addText(wd, { x: marginX + i * cellW + 0.05, y: marginY - 0.35, fontSize: 12, bold: true });\n  });\n\n  // Cells\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cols; c++) {\n      const cell = matrix[r][c]; // { date: Date|null, inMonth: boolean }\n      const x = marginX + c * cellW;\n      const y = marginY + r * cellH;\n\n      // Cell background/frame\n      s.addShape(pptx.ShapeType.rect, {\n        x, y, w: cellW - 0.02, h: cellH - 0.02,\n        line: { color: \"CFCFCF\", width: 0.5 },\n        fill: cell?.inMonth ? \"FFFFFF\" : \"F6F6F6\",\n        shadow: { type: \"outer\" },\n      });\n\n      if (cell?.date) {\n        // Date number (top-right)\n        const dd = String(cell.date.getDate());\n        s.addText(dd, { x: x + cellW - 0.28, y: y + 0.05, fontSize: 11 });\n\n        // Events for this date\n        const iso = toISODate(cell.date);\n        const dayEvents = itemsByDay.get(iso) || [];\n        let yCursor = y + 0.28;\n        const yLimit = y + cellH - 0.08;\n\n        dayEvents.forEach((evt: any) => {\n          if (yCursor > yLimit) return; // clip overflow\n          // colored chip + title\n          const chipW = cellW - 0.12;\n          const chipH = 0.2;\n          s.addShape(pptx.ShapeType.roundRect, {\n            x: x + 0.06, y: yCursor, w: chipW, h: chipH,\n            fill: TYPE_COLORS[evt.type as EventType] || \"999999\",\n            line: { color: \"FFFFFF\" },\n            rectRadius: 4,\n          });\n          s.addText(shorten(evt.title || \"\", 36), {\n            x: x + 0.1, y: yCursor + 0.02, fontSize: 10, color: \"FFFFFF\",\n          });\n          yCursor += chipH + 0.06;\n        });\n      }\n    }\n  }\n}\n\n/** Slide: QUARTER GRID (3 months on one slide) **/\nfunction addQuarterGridSlide(pptx: any, quarter: any, events: Event[]) {\n  const s = pptx.addSlide();\n  s.addText(quarter.label, { x: 0.5, y: 0.2, fontSize: 20, bold: true });\n\n  const area = { x: 0.4, y: 0.6, w: 9.2, h: 4.8 };\n  const months = quarter.months; // [{year, monthIdx, label}, ... 3 items]\n  const colW = area.w / 3;\n  months.forEach((m: any, idx: number) => {\n    // Subheading\n    s.addText(m.label, { x: area.x + idx * colW + 0.02, y: area.y - 0.3, fontSize: 14, bold: true });\n\n    // Draw a small month grid inside column\n    const matrix = monthMatrix(m.year, m.monthIdx, 1);\n    const inner = { x: area.x + idx * colW, y: area.y, w: colW - 0.06, h: area.h };\n    drawCompactMonthGrid(pptx, s, matrix, events, inner);\n  });\n}\n\n/** Compact month grid helper used in Quarter slides **/\nfunction drawCompactMonthGrid(pptx: any, slide: any, matrix: any, events: Event[], rect: any) {\n  const cols = 7, rows = 6;\n  const cellW = rect.w / cols;\n  const cellH = rect.h / (rows + 0.7); // leave space for weekday header\n  const startY = rect.y + 0.3;\n\n  const itemsByDay = bucketEventsByISODate(events);\n  const weekdays = [\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\"];\n  weekdays.forEach((wd, i) => {\n    slide.addText(wd, { x: rect.x + i * cellW + 0.02, y: rect.y, fontSize: 9, bold: true });\n  });\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cols; c++) {\n      const cell = matrix[r][c];\n      const x = rect.x + c * cellW;\n      const y = startY + r * cellH;\n\n      slide.addShape(pptx.ShapeType.rect, {\n        x, y, w: cellW - 0.01, h: cellH - 0.01,\n        line: { color: \"D4D4D4\", width: 0.25 },\n        fill: cell?.inMonth ? \"FFFFFF\" : \"F7F7F7\",\n      });\n\n      if (cell?.date) {\n        slide.addText(String(cell.date.getDate()), { x: x + cellW - 0.22, y: y + 0.02, fontSize: 8 });\n        const iso = toISODate(cell.date);\n        const dayEvents = itemsByDay.get(iso) || [];\n        // Render up to 2 tiny dots by type under the date number\n        let dotX = x + 0.06;\n        const dotY = y + 0.22;\n        dayEvents.slice(0, 4).forEach((evt: any) => {\n          slide.addShape(pptx.ShapeType.ellipse, {\n            x: dotX, y: dotY, w: 0.08, h: 0.08, fill: TYPE_COLORS[evt.type as EventType] || \"999999\", line: { type: \"none\" },\n          });\n          dotX += 0.12;\n        });\n      }\n    }\n  }\n}\n\n/** ========== Utilities ========== **/\n\nconst OPERATING_START = new Date(\"2025-08-01\");\nconst OPERATING_END   = new Date(\"2026-07-31\");\n\nfunction iterateOperatingMonths() {\n  const months = [];\n  let y = OPERATING_START.getFullYear();\n  let m = OPERATING_START.getMonth();\n  while (y < OPERATING_END.getFullYear() || (y === OPERATING_END.getFullYear() && m <= OPERATING_END.getMonth())) {\n    months.push({ year: y, monthIdx: m, label: monthLabel(y, m) });\n    m++;\n    if (m > 11) { m = 0; y++; }\n  }\n  return months;\n}\n\nfunction operatingYearQuarters() {\n  // Q1: Aug–Oct 2025, Q2: Nov–Jan, Q3: Feb–Apr, Q4: May–Jul\n  const start = { y: 2025, m: 7 }; // Aug (0-index = 7)\n  const labels = [\"Q1 (Aug–Oct 2025)\",\"Q2 (Nov 2025–Jan 2026)\",\"Q3 (Feb–Apr 2026)\",\"Q4 (May–Jul 2026)\"];\n  const quarters = [];\n  let y = start.y, m = start.m;\n  for (let q = 0; q < 4; q++) {\n    const months = [];\n    for (let i = 0; i < 3; i++) {\n      months.push({ year: y, monthIdx: m, label: monthLabel(y, m) });\n      m++; if (m > 11) { m = 0; y++; }\n    }\n    quarters.push({ label: labels[q], months });\n  }\n  return quarters;\n}\n\nfunction monthMatrix(year: number, monthIdx: number, weekStartsOn = 1 /* 0=Sun,1=Mon */) {\n  // Build a 6x7 matrix of dates (Date|null) for the given month\n  const first = new Date(Date.UTC(year, monthIdx, 1));\n  const last = new Date(Date.UTC(year, monthIdx + 1, 0));\n  const firstDow = (first.getUTCDay() + 7 - weekStartsOn) % 7; // 0..6 offset\n  const daysInMonth = last.getUTCDate();\n\n  const matrix = Array.from({ length: 6 }, () => Array(7).fill(null));\n  let r = 0, c = firstDow;\n  for (let day = 1; day <= daysInMonth; day++) {\n    const d = new Date(Date.UTC(year, monthIdx, day));\n    matrix[r][c] = { date: d, inMonth: true };\n    c++;\n    if (c > 6) { c = 0; r++; }\n  }\n\n  // Fill before first day\n  let prev = new Date(Date.UTC(year, monthIdx, 0)); // last day prev month\n  for (let i = firstDow - 1; i >= 0; i--) {\n    matrix[0][i] = { date: new Date(Date.UTC(prev.getUTCFullYear(), prev.getUTCMonth(), prev.getUTCDate() - (firstDow - 1 - i))), inMonth: false };\n  }\n  // Fill after last day\n  let rr = r, cc = c;\n  let nextDay = 1;\n  while (rr < 6) {\n    matrix[rr][cc] = { date: new Date(Date.UTC(year, monthIdx + 1, nextDay++)), inMonth: false };\n    cc++;\n    if (cc > 6) { cc = 0; rr++; }\n  }\n  return matrix;\n}\n\nfunction bucketEventsByISODate(events: Event[]) {\n  const map = new Map();\n  const inRange = events\n    .map((e) => ({ ...e, _d: new Date(e.date) }))\n    .filter((e) => e._d >= OPERATING_START && e._d <= OPERATING_END)\n    .sort((a, b) => a._d.getTime() - b._d.getTime());\n\n  inRange.forEach((e) => {\n    const key = toISODate(e._d);\n    if (!map.has(key)) map.set(key, []);\n    map.get(key).push(e);\n  });\n  return map;\n}\n\nfunction eventsForMonth(events: Event[], year: number, monthIdx: number) {\n  return events\n    .map((e) => ({ ...e, _d: new Date(e.date) }))\n    .filter((e) => e._d.getFullYear() === year && e._d.getMonth() === monthIdx)\n    .sort((a, b) => a._d.getTime() - b._d.getTime());\n}\n\nfunction monthLabel(y: number, m: number) {\n  const names = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\n  return `${names[m]} ${y}`;\n}\n\nfunction toISODate(d: Date) {\n  const y = d.getFullYear();\n  const m = String(d.getMonth() + 1).padStart(2, \"0\");\n  const day = String(d.getDate()).padStart(2, \"0\");\n  return `${y}-${m}-${day}`;\n}\n\nfunction formatDate(iso: string) {\n  const d = new Date(iso);\n  const dd = String(d.getDate()).padStart(2, \"0\");\n  const mon = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"][d.getMonth()];\n  return `${dd} ${mon}`;\n}\n\nfunction prettyType(t: string) {\n  return (t || \"\").replace(/_/g, \" \").replace(/\\b\\w/g, (m) => m.toUpperCase());\n}\n\nfunction shorten(s: string, n: number) {\n  return s.length > n ? s.slice(0, n - 1) + \"…\" : s;\n}","size_bytes":11301},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/DataRecoveryButton.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { RefreshCw, CheckCircle, AlertCircle, Database, Search, FileCheck, Upload } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { performDataRecovery } from '@/utils/dataRecovery';\nimport { useCalendarStore } from '@/stores/calendarStore';\n\ninterface RecoveryProgress {\n  stage: 'scanning' | 'normalizing' | 'deduplicating' | 'importing' | 'complete' | 'error';\n  found: number;\n  processed: number;\n  imported: number;\n  duplicates: number;\n  errors: string[];\n}\n\nexport function DataRecoveryButton() {\n  const [isRecovering, setIsRecovering] = useState(false);\n  const [recoveryStatus, setRecoveryStatus] = useState<'idle' | 'success' | 'error'>('idle');\n  const [progress, setProgress] = useState<RecoveryProgress | null>(null);\n  const { toast } = useToast();\n  const { loadEvents } = useCalendarStore();\n\n  const handleRecovery = async () => {\n    setIsRecovering(true);\n    setRecoveryStatus('idle');\n    setProgress(null);\n\n    try {\n      const result = await performDataRecovery((progressUpdate) => {\n        setProgress(progressUpdate);\n      });\n      \n      if (result.success && result.migratedCount > 0) {\n        setRecoveryStatus('success');\n        toast({\n          title: 'Recovery Successful!',\n          description: `Successfully recovered ${result.migratedCount} events${result.duplicatesSkipped > 0 ? `, skipped ${result.duplicatesSkipped} duplicates` : ''}.`,\n        });\n        \n        // Reload events to show the recovered data\n        await loadEvents();\n      } else if (result.migratedCount === 0) {\n        // Check if it's because no data was found or all were duplicates\n        if (result.duplicatesSkipped > 0) {\n          toast({\n            title: 'No New Data',\n            description: `Found ${result.duplicatesSkipped} events but they were already imported previously.`,\n          });\n        } else {\n          toast({\n            title: 'No Data Found',\n            description: 'No events were found in your browser storage to recover.',\n          });\n        }\n      } else {\n        setRecoveryStatus('error');\n        toast({\n          title: 'Partial Recovery',\n          description: `Recovered ${result.migratedCount} events, but ${result.errors.length} failed. Check console for details.`,\n          variant: 'destructive',\n        });\n      }\n\n      if (result.errors.length > 0) {\n        console.error('Recovery errors:', result.errors);\n      }\n    } catch (error) {\n      setRecoveryStatus('error');\n      console.error('Recovery error:', error);\n      toast({\n        title: 'Recovery Error',\n        description: 'An unexpected error occurred during recovery. Please check the console.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsRecovering(false);\n    }\n  };\n\n  const getStageIcon = (stage: string) => {\n    switch (stage) {\n      case 'scanning': return <Search className=\"w-3 h-3\" />;\n      case 'normalizing': return <FileCheck className=\"w-3 h-3\" />;\n      case 'deduplicating': return <Database className=\"w-3 h-3\" />;\n      case 'importing': return <Upload className=\"w-3 h-3\" />;\n      case 'complete': return <CheckCircle className=\"w-3 h-3\" />;\n      case 'error': return <AlertCircle className=\"w-3 h-3\" />;\n      default: return <RefreshCw className=\"w-3 h-3\" />;\n    }\n  };\n\n  const getStageText = (stage: string) => {\n    switch (stage) {\n      case 'scanning': return 'Scanning sources...';\n      case 'normalizing': return 'Normalizing data...';\n      case 'deduplicating': return 'Removing duplicates...';\n      case 'importing': return 'Importing events...';\n      case 'complete': return 'Complete!';\n      case 'error': return 'Error occurred';\n      default: return 'Processing...';\n    }\n  };\n\n  const getButtonContent = () => {\n    if (isRecovering && progress) {\n      return (\n        <div className=\"flex items-center space-x-2\">\n          {getStageIcon(progress.stage)}\n          <span className=\"text-xs\">{getStageText(progress.stage)}</span>\n        </div>\n      );\n    }\n\n    if (isRecovering) {\n      return (\n        <>\n          <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n          Recovering...\n        </>\n      );\n    }\n\n    if (recoveryStatus === 'success') {\n      return (\n        <>\n          <CheckCircle className=\"w-4 h-4 mr-2 text-green-600\" />\n          Recovered!\n        </>\n      );\n    }\n\n    if (recoveryStatus === 'error') {\n      return (\n        <>\n          <AlertCircle className=\"w-4 h-4 mr-2 text-red-600\" />\n          Try Again\n        </>\n      );\n    }\n\n    return (\n      <>\n        <RefreshCw className=\"w-4 h-4 mr-2\" />\n        Recover Events\n      </>\n    );\n  };\n\n  const getProgressPercentage = () => {\n    if (!progress || !isRecovering) return 0;\n    \n    // Calculate progress based on stage and processed items\n    const stageWeights = {\n      'scanning': 20,\n      'normalizing': 40,\n      'deduplicating': 60,\n      'importing': 80,\n      'complete': 100,\n      'error': 0\n    };\n    \n    const baseProgress = stageWeights[progress.stage] || 0;\n    \n    // Add fine-grained progress within importing stage\n    if (progress.stage === 'importing' && progress.found > 0) {\n      const importProgress = (progress.imported / progress.found) * 20; // 20% weight for importing\n      return Math.min(baseProgress + importProgress, 100);\n    }\n    \n    return baseProgress;\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <Button\n        onClick={handleRecovery}\n        disabled={isRecovering}\n        variant={recoveryStatus === 'success' ? 'default' : 'outline'}\n        size=\"sm\"\n        className={`w-full text-xs ${\n          recoveryStatus === 'success' \n            ? 'bg-green-600 hover:bg-green-700 text-white border-green-600' \n            : 'border-yellow-300 text-yellow-800 hover:bg-yellow-100'\n        }`}\n        data-testid=\"button-recover-data\"\n      >\n        {getButtonContent()}\n      </Button>\n      \n      {/* Progress Information */}\n      {isRecovering && progress && (\n        <div className=\"space-y-2 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"font-medium text-blue-800\">\n              {getStageText(progress.stage)}\n            </span>\n            <span className=\"text-blue-600\">\n              {getProgressPercentage().toFixed(0)}%\n            </span>\n          </div>\n          \n          <Progress \n            value={getProgressPercentage()} \n            className=\"h-2\"\n          />\n          \n          {/* Detailed Stats */}\n          {progress.found > 0 && (\n            <div className=\"grid grid-cols-2 gap-2 text-xs text-blue-700\">\n              <div>Found: {progress.found}</div>\n              <div>Processed: {progress.processed}</div>\n              <div>Imported: {progress.imported}</div>\n              <div>Duplicates: {progress.duplicates}</div>\n            </div>\n          )}\n          \n          {/* Error count */}\n          {progress.errors.length > 0 && (\n            <div className=\"text-xs text-red-600\">\n              Errors: {progress.errors.length}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Success Summary */}\n      {recoveryStatus === 'success' && progress && (\n        <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\n          <div className=\"text-xs text-green-800 space-y-1\">\n            <div className=\"font-medium\">Recovery Complete!</div>\n            <div>✅ Imported: {progress.imported} events</div>\n            {progress.duplicates > 0 && (\n              <div>⏭️ Skipped: {progress.duplicates} duplicates</div>\n            )}\n            {progress.errors.length > 0 && (\n              <div>⚠️ Errors: {progress.errors.length}</div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":7973},"client/src/utils/dataRecovery.ts":{"content":"import { openDB, type DBSchema, type IDBPDatabase } from 'idb';\nimport { Event, EventType, insertEventSchema } from '@shared/schema';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface CalendarDB extends DBSchema {\n  events: {\n    key: string;\n    value: Event;\n    indexes: {\n      'by-date': string;\n      'by-type': string;\n    };\n  };\n}\n\n// Legacy event format that might exist in old storage\ninterface LegacyEvent {\n  id?: string;\n  title: string;\n  type?: string | EventType;\n  date: string | Date;\n  endDate?: string | Date;\n  startTime?: string;\n  endTime?: string;\n  notes?: string;\n  createdAt?: string | Date;\n  updatedAt?: string | Date;\n  // Old field names that might exist\n  eventType?: string;\n  description?: string;\n  time?: string;\n  duration?: string;\n}\n\n// Recovery progress reporting\ninterface RecoveryProgress {\n  stage: 'scanning' | 'normalizing' | 'deduplicating' | 'importing' | 'complete' | 'error';\n  found: number;\n  processed: number;\n  imported: number;\n  duplicates: number;\n  errors: string[];\n}\n\n// Recovery state tracking\nconst RECOVERY_STATE_KEY = 'calendar-recovery-state';\ninterface RecoveryState {\n  lastRunDate: string;\n  importedFingerprints: string[];\n  completedSources: string[];\n}\n\n// Database names to check for IndexedDB data\nconst INDEXEDDB_NAMES = [\n  'calendar-db',\n  'calendar',\n  'events-db',\n  'calendar-app',\n  'event-storage',\n  'replit-calendar'\n];\n\n// LocalStorage keys to check for data\nconst LOCALSTORAGE_KEYS = [\n  'calendar-events',\n  'events',\n  'calendar-data',\n  'stored-events',\n  'backup-events',\n  'event-backup'\n];\n\n// Create a fingerprint for an event to detect duplicates\nfunction createEventFingerprint(event: LegacyEvent): string {\n  const title = (event.title || '').toLowerCase().trim();\n  const date = normalizeDate(event.date);\n  const type = normalizeEventType(event.type);\n  const startTime = event.startTime || '';\n  \n  return `${title}-${date}-${type}-${startTime}`;\n}\n\n// Normalize legacy date formats\nfunction normalizeDate(date: string | Date | undefined): string {\n  if (!date) return '';\n  \n  try {\n    if (typeof date === 'string') {\n      // Handle various date string formats\n      const parsedDate = new Date(date);\n      if (isNaN(parsedDate.getTime())) {\n        return '';\n      }\n      return parsedDate.toISOString().split('T')[0]; // YYYY-MM-DD\n    } else {\n      return date.toISOString().split('T')[0];\n    }\n  } catch {\n    return '';\n  }\n}\n\n// Normalize event type to match current schema\nfunction normalizeEventType(type: string | EventType | undefined): EventType {\n  if (!type) return 'MEETING';\n  \n  const typeStr = type.toString().toUpperCase();\n  \n  // Map legacy types to current types\n  const typeMapping: Record<string, EventType> = {\n    'PLAN': 'PLANNING',\n    'PLANNING': 'PLANNING',\n    'MEET': 'MEETING',\n    'MEETING': 'MEETING',\n    'REVIEW': 'MONTHLY_REVIEW',\n    'MONTHLY_REVIEW': 'MONTHLY_REVIEW',\n    'HOLIDAY': 'HOLIDAYS',\n    'HOLIDAYS': 'HOLIDAYS',\n    'EVENT': 'MEETING',\n    'CONFERENCE': 'MEETING',\n    'CALL': 'MEETING'\n  };\n  \n  return typeMapping[typeStr] || 'MEETING';\n}\n\n// Normalize legacy event to current schema\nfunction normalizeLegacyEvent(legacyEvent: LegacyEvent): Event | null {\n  try {\n    // Extract title from various possible fields\n    const title = legacyEvent.title || legacyEvent.description || 'Untitled Event';\n    if (!title.trim()) return null;\n\n    // Normalize date\n    const date = normalizeDate(legacyEvent.date);\n    if (!date) return null;\n\n    // Parse time information\n    let startTime = legacyEvent.startTime;\n    let endTime = legacyEvent.endTime;\n    \n    // Handle legacy time field\n    if (!startTime && legacyEvent.time) {\n      const timeMatch = legacyEvent.time.match(/(\\d{1,2}):(\\d{2})/);\n      if (timeMatch) {\n        startTime = legacyEvent.time;\n      }\n    }\n    \n    // Handle duration field\n    if (startTime && !endTime && legacyEvent.duration) {\n      const durationMatch = legacyEvent.duration.match(/(\\d+)/);\n      if (durationMatch) {\n        const hours = parseInt(durationMatch[1]);\n        const startHour = parseInt(startTime.split(':')[0]);\n        const startMin = parseInt(startTime.split(':')[1] || '0');\n        const endHour = startHour + hours;\n        endTime = `${endHour.toString().padStart(2, '0')}:${startMin.toString().padStart(2, '0')}`;\n      }\n    }\n\n    const normalizedEvent: Event = {\n      id: legacyEvent.id || '', // Will be generated by server\n      title: title.trim(),\n      type: normalizeEventType(legacyEvent.type || legacyEvent.eventType),\n      date,\n      endDate: legacyEvent.endDate ? normalizeDate(legacyEvent.endDate) : undefined,\n      startTime,\n      endTime,\n      notes: legacyEvent.notes || legacyEvent.description,\n      createdAt: '', // Will be set by server\n      updatedAt: '' // Will be set by server\n    };\n\n    // Validate against schema\n    const validationResult = insertEventSchema.safeParse({\n      title: normalizedEvent.title,\n      type: normalizedEvent.type,\n      date: normalizedEvent.date,\n      endDate: normalizedEvent.endDate,\n      startTime: normalizedEvent.startTime,\n      endTime: normalizedEvent.endTime,\n      notes: normalizedEvent.notes\n    });\n\n    if (!validationResult.success) {\n      console.warn('Event failed validation:', normalizedEvent, validationResult.error);\n      return null;\n    }\n\n    return normalizedEvent;\n  } catch (error) {\n    console.error('Error normalizing legacy event:', error, legacyEvent);\n    return null;\n  }\n}\n\n// Get recovery state from localStorage\nfunction getRecoveryState(): RecoveryState {\n  try {\n    const state = localStorage.getItem(RECOVERY_STATE_KEY);\n    if (state) {\n      return JSON.parse(state);\n    }\n  } catch (error) {\n    console.warn('Failed to read recovery state:', error);\n  }\n  \n  return {\n    lastRunDate: '',\n    importedFingerprints: [],\n    completedSources: []\n  };\n}\n\n// Save recovery state to localStorage\nfunction saveRecoveryState(state: RecoveryState): void {\n  try {\n    localStorage.setItem(RECOVERY_STATE_KEY, JSON.stringify(state));\n  } catch (error) {\n    console.warn('Failed to save recovery state:', error);\n  }\n}\n\n// Check if source was already completed\nfunction isSourceCompleted(source: string): boolean {\n  const state = getRecoveryState();\n  return state.completedSources.includes(source);\n}\n\n// Mark source as completed\nfunction markSourceCompleted(source: string): void {\n  const state = getRecoveryState();\n  if (!state.completedSources.includes(source)) {\n    state.completedSources.push(source);\n    saveRecoveryState(state);\n  }\n}\n\n// Check if event was already imported\nfunction isEventImported(fingerprint: string): boolean {\n  const state = getRecoveryState();\n  return state.importedFingerprints.includes(fingerprint);\n}\n\n// Mark event as imported\nfunction markEventImported(fingerprint: string): void {\n  const state = getRecoveryState();\n  if (!state.importedFingerprints.includes(fingerprint)) {\n    state.importedFingerprints.push(fingerprint);\n    saveRecoveryState(state);\n  }\n}\n\n// Recover data from a specific IndexedDB database\nasync function recoverFromIndexedDB(dbName: string): Promise<LegacyEvent[]> {\n  if (isSourceCompleted(`indexeddb-${dbName}`)) {\n    console.log(`Skipping already completed IndexedDB source: ${dbName}`);\n    return [];\n  }\n\n  try {\n    console.log(`Checking IndexedDB: ${dbName}`);\n    const db = await openDB<CalendarDB>(dbName, 1);\n    const events = await db.getAll('events');\n    console.log(`Found ${events.length} events in IndexedDB: ${dbName}`);\n    \n    if (events.length > 0) {\n      markSourceCompleted(`indexeddb-${dbName}`);\n    }\n    \n    return events;\n  } catch (error) {\n    console.log(`No data in IndexedDB ${dbName}:`, error);\n    return [];\n  }\n}\n\n// Recover data from localStorage\nasync function recoverFromLocalStorage(): Promise<LegacyEvent[]> {\n  const allEvents: LegacyEvent[] = [];\n  \n  for (const key of LOCALSTORAGE_KEYS) {\n    if (isSourceCompleted(`localstorage-${key}`)) {\n      console.log(`Skipping already completed localStorage source: ${key}`);\n      continue;\n    }\n\n    try {\n      const data = localStorage.getItem(key);\n      if (data) {\n        console.log(`Checking localStorage key: ${key}`);\n        const parsed = JSON.parse(data);\n        \n        let events: LegacyEvent[] = [];\n        if (Array.isArray(parsed)) {\n          events = parsed;\n        } else if (parsed.events && Array.isArray(parsed.events)) {\n          events = parsed.events;\n        } else if (typeof parsed === 'object' && parsed.title) {\n          events = [parsed];\n        }\n        \n        if (events.length > 0) {\n          console.log(`Found ${events.length} events in localStorage: ${key}`);\n          allEvents.push(...events);\n          markSourceCompleted(`localstorage-${key}`);\n        }\n      }\n    } catch (error) {\n      console.log(`Error reading localStorage ${key}:`, error);\n    }\n  }\n  \n  return allEvents;\n}\n\n// Main recovery function with progress reporting\nexport async function performDataRecovery(\n  progressCallback?: (progress: RecoveryProgress) => void\n): Promise<{ success: boolean; migratedCount: number; duplicatesSkipped: number; errors: string[] }> {\n  \n  const progress: RecoveryProgress = {\n    stage: 'scanning',\n    found: 0,\n    processed: 0,\n    imported: 0,\n    duplicates: 0,\n    errors: []\n  };\n\n  const updateProgress = () => {\n    if (progressCallback) {\n      progressCallback({ ...progress });\n    }\n  };\n\n  try {\n    updateProgress();\n\n    // Step 1: Scan all data sources\n    console.log('🔍 Scanning for recoverable data...');\n    \n    const allLegacyEvents: LegacyEvent[] = [];\n    \n    // Check all IndexedDB databases\n    for (const dbName of INDEXEDDB_NAMES) {\n      const events = await recoverFromIndexedDB(dbName);\n      allLegacyEvents.push(...events);\n    }\n    \n    // Check localStorage\n    const localStorageEvents = await recoverFromLocalStorage();\n    allLegacyEvents.push(...localStorageEvents);\n    \n    progress.found = allLegacyEvents.length;\n    progress.stage = 'normalizing';\n    updateProgress();\n\n    if (allLegacyEvents.length === 0) {\n      progress.stage = 'complete';\n      updateProgress();\n      return { \n        success: true, \n        migratedCount: 0, \n        duplicatesSkipped: 0, \n        errors: ['No data found to recover'] \n      };\n    }\n\n    console.log(`📋 Found ${allLegacyEvents.length} total events, normalizing...`);\n\n    // Step 2: Normalize and validate events\n    const normalizedEvents: Event[] = [];\n    const seenFingerprints = new Set<string>();\n    \n    for (const legacyEvent of allLegacyEvents) {\n      progress.processed++;\n      updateProgress();\n\n      const normalizedEvent = normalizeLegacyEvent(legacyEvent);\n      if (!normalizedEvent) {\n        progress.errors.push(`Failed to normalize event: ${legacyEvent.title || 'Unknown'}`);\n        continue;\n      }\n\n      // Check for duplicates\n      const fingerprint = createEventFingerprint(normalizedEvent);\n      \n      if (seenFingerprints.has(fingerprint) || isEventImported(fingerprint)) {\n        progress.duplicates++;\n        updateProgress();\n        console.log(`⏭️  Skipping duplicate: ${normalizedEvent.title}`);\n        continue;\n      }\n\n      seenFingerprints.add(fingerprint);\n      normalizedEvents.push(normalizedEvent);\n    }\n\n    progress.stage = 'importing';\n    updateProgress();\n\n    console.log(`📤 Importing ${normalizedEvents.length} unique events...`);\n\n    // Step 3: Import to database\n    let importedCount = 0;\n    \n    for (const event of normalizedEvents) {\n      try {\n        const { id, createdAt, updatedAt, ...eventData } = event;\n        \n        const response = await apiRequest('POST', '/api/events', eventData);\n        \n        if (response.ok) {\n          importedCount++;\n          progress.imported = importedCount;\n          \n          // Mark as imported\n          const fingerprint = createEventFingerprint(event);\n          markEventImported(fingerprint);\n          \n          console.log(`✅ Imported: ${event.title}`);\n        } else {\n          const errorText = await response.text();\n          progress.errors.push(`Failed to import \"${event.title}\": ${errorText}`);\n        }\n      } catch (error) {\n        const errorMsg = error instanceof Error ? error.message : String(error);\n        progress.errors.push(`Error importing \"${event.title}\": ${errorMsg}`);\n      }\n      \n      updateProgress();\n    }\n\n    // Update recovery state\n    const state = getRecoveryState();\n    state.lastRunDate = new Date().toISOString();\n    saveRecoveryState(state);\n\n    progress.stage = 'complete';\n    updateProgress();\n\n    console.log(`🎉 Recovery complete! Imported ${importedCount} events, skipped ${progress.duplicates} duplicates`);\n\n    return {\n      success: true,\n      migratedCount: importedCount,\n      duplicatesSkipped: progress.duplicates,\n      errors: progress.errors\n    };\n\n  } catch (error) {\n    const errorMsg = error instanceof Error ? error.message : String(error);\n    progress.stage = 'error';\n    progress.errors.push(`Recovery failed: ${errorMsg}`);\n    updateProgress();\n    \n    console.error('❌ Recovery failed:', error);\n    \n    return {\n      success: false,\n      migratedCount: progress.imported,\n      duplicatesSkipped: progress.duplicates,\n      errors: progress.errors\n    };\n  }\n}\n\n// Legacy exports for backward compatibility\nexport async function recoverIndexedDBData(): Promise<Event[]> {\n  console.warn('recoverIndexedDBData is deprecated, use performDataRecovery instead');\n  const result = await performDataRecovery();\n  return []; // Can't return meaningful data with old interface\n}\n\nexport async function migrateEventsToDatabase(events: Event[]): Promise<void> {\n  console.warn('migrateEventsToDatabase is deprecated, use performDataRecovery instead');\n  // Legacy function kept for compatibility but does nothing\n}\n\n// Utility to reset recovery state (for testing)\nexport function resetRecoveryState(): void {\n  localStorage.removeItem(RECOVERY_STATE_KEY);\n  console.log('🔄 Recovery state reset');\n}\n\n// Utility to get recovery statistics\nexport function getRecoveryStats(): RecoveryState & { totalSources: number } {\n  const state = getRecoveryState();\n  return {\n    ...state,\n    totalSources: INDEXEDDB_NAMES.length + LOCALSTORAGE_KEYS.length\n  };\n}","size_bytes":14341},"client/src/utils/testDataRecovery.ts":{"content":"// Test utility for data recovery system validation\nimport { openDB } from 'idb';\nimport { EventType } from '@shared/schema';\n\n// Test data scenarios\nconst TEST_SCENARIOS = {\n  // Valid events that should be imported successfully\n  validEvents: [\n    {\n      id: 'test-1',\n      title: 'Sprint Planning',\n      type: 'PLANNING',\n      date: '2025-01-20',\n      startTime: '09:00',\n      endTime: '11:00',\n      notes: 'Q1 planning session'\n    },\n    {\n      id: 'test-2', \n      title: 'Team Standup',\n      type: 'MEETING',\n      date: '2025-01-21',\n      startTime: '10:00',\n      endTime: '10:30'\n    }\n  ],\n\n  // Legacy events with old field names that should be normalized\n  legacyEvents: [\n    {\n      id: 'legacy-1',\n      title: 'Product Review',\n      eventType: 'REVIEW', // Old field name\n      date: new Date('2025-01-22'), // Date object instead of string\n      time: '14:00', // Old time field\n      duration: '2', // Duration in hours\n      description: 'Monthly product review' // Old notes field\n    },\n    {\n      title: 'Holiday Party',\n      type: 'HOLIDAY', // Will be normalized to HOLIDAYS\n      date: '2025-12-25',\n      notes: 'Company holiday celebration'\n    }\n  ],\n\n  // Malformed events that should be rejected or fixed\n  malformedEvents: [\n    {\n      // Missing title - should be rejected\n      type: 'MEETING',\n      date: '2025-01-23'\n    },\n    {\n      title: '', // Empty title - should be rejected\n      type: 'MEETING', \n      date: '2025-01-24'\n    },\n    {\n      title: 'Invalid Date Event',\n      type: 'MEETING',\n      date: 'not-a-date' // Invalid date - should be rejected\n    },\n    {\n      title: 'Unknown Type Event',\n      type: 'INVALID_TYPE', // Will be normalized to MEETING\n      date: '2025-01-25'\n    }\n  ],\n\n  // Events that would create duplicates\n  duplicateEvents: [\n    {\n      id: 'dup-1',\n      title: 'Sprint Planning', // Same as test-1\n      type: 'PLANNING',\n      date: '2025-01-20',\n      startTime: '09:00',\n      endTime: '11:00'\n    }\n  ]\n};\n\n// Setup test data in IndexedDB\nexport async function setupTestIndexedDB(scenario: keyof typeof TEST_SCENARIOS): Promise<void> {\n  try {\n    const dbName = 'test-calendar-db';\n    const db = await openDB(dbName, 1, {\n      upgrade(db) {\n        if (!db.objectStoreNames.contains('events')) {\n          db.createObjectStore('events', { keyPath: 'id' });\n        }\n      }\n    });\n\n    const events = TEST_SCENARIOS[scenario];\n    console.log(`Setting up test IndexedDB with ${events.length} ${scenario} events`);\n\n    for (const event of events) {\n      const eventWithId = {\n        ...event,\n        id: (event as any).id || `generated-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n      };\n      await db.put('events', eventWithId);\n    }\n\n    db.close();\n    console.log(`✅ Test IndexedDB setup complete for scenario: ${scenario}`);\n  } catch (error) {\n    console.error('❌ Failed to setup test IndexedDB:', error);\n  }\n}\n\n// Setup test data in localStorage\nexport async function setupTestLocalStorage(scenario: keyof typeof TEST_SCENARIOS): Promise<void> {\n  try {\n    const events = TEST_SCENARIOS[scenario];\n    const testData = {\n      events,\n      exportedAt: new Date().toISOString(),\n      version: '1.0'\n    };\n\n    localStorage.setItem('test-calendar-events', JSON.stringify(testData));\n    console.log(`✅ Test localStorage setup complete for scenario: ${scenario} (${events.length} events)`);\n  } catch (error) {\n    console.error('❌ Failed to setup test localStorage:', error);\n  }\n}\n\n// Clean up test data\nexport async function cleanupTestData(): Promise<void> {\n  try {\n    // Clean IndexedDB\n    const dbNames = ['test-calendar-db', 'calendar-db', 'calendar'];\n    for (const dbName of dbNames) {\n      try {\n        const deleteRequest = indexedDB.deleteDatabase(dbName);\n        await new Promise((resolve, reject) => {\n          deleteRequest.onsuccess = () => resolve(void 0);\n          deleteRequest.onerror = () => reject(deleteRequest.error);\n        });\n        console.log(`🗑️ Cleaned IndexedDB: ${dbName}`);\n      } catch (error) {\n        console.log(`⚠️ Could not clean IndexedDB ${dbName}:`, error);\n      }\n    }\n\n    // Clean localStorage\n    const keys = ['test-calendar-events', 'calendar-events', 'events', 'calendar-recovery-state'];\n    for (const key of keys) {\n      localStorage.removeItem(key);\n    }\n    console.log('🗑️ Cleaned localStorage test data');\n\n  } catch (error) {\n    console.error('❌ Failed to cleanup test data:', error);\n  }\n}\n\n// Run comprehensive recovery test\nexport async function runRecoveryTest(): Promise<{\n  success: boolean;\n  results: Array<{\n    scenario: string;\n    success: boolean;\n    imported: number;\n    duplicates: number;\n    errors: number;\n    details: string;\n  }>;\n}> {\n  const results: Array<{\n    scenario: string;\n    success: boolean;\n    imported: number;\n    duplicates: number;\n    errors: number;\n    details: string;\n  }> = [];\n\n  console.log('🧪 Starting comprehensive recovery test...');\n\n  try {\n    // Import the recovery function dynamically to avoid circular imports\n    const { performDataRecovery, resetRecoveryState } = await import('./dataRecovery');\n\n    // Test 1: Valid events\n    console.log('\\n📋 Test 1: Valid Events');\n    await cleanupTestData();\n    resetRecoveryState();\n    await setupTestIndexedDB('validEvents');\n    \n    const test1Result = await performDataRecovery();\n    results.push({\n      scenario: 'Valid Events',\n      success: test1Result.success && test1Result.migratedCount === 2,\n      imported: test1Result.migratedCount,\n      duplicates: test1Result.duplicatesSkipped,\n      errors: test1Result.errors.length,\n      details: `Expected 2 imports, got ${test1Result.migratedCount}`\n    });\n\n    // Test 2: Legacy events with normalization\n    console.log('\\n🔄 Test 2: Legacy Events');\n    await cleanupTestData();\n    resetRecoveryState();\n    await setupTestLocalStorage('legacyEvents');\n    \n    const test2Result = await performDataRecovery();\n    results.push({\n      scenario: 'Legacy Events',\n      success: test2Result.success && test2Result.migratedCount >= 1, // At least 1 should be normalized successfully\n      imported: test2Result.migratedCount,\n      duplicates: test2Result.duplicatesSkipped,\n      errors: test2Result.errors.length,\n      details: `Legacy events normalized and imported`\n    });\n\n    // Test 3: Malformed events\n    console.log('\\n⚠️ Test 3: Malformed Events');\n    await cleanupTestData();\n    resetRecoveryState();\n    await setupTestIndexedDB('malformedEvents');\n    \n    const test3Result = await performDataRecovery();\n    results.push({\n      scenario: 'Malformed Events',\n      success: test3Result.errors.length > 0, // Should have errors for malformed data\n      imported: test3Result.migratedCount,\n      duplicates: test3Result.duplicatesSkipped,\n      errors: test3Result.errors.length,\n      details: `Malformed events properly rejected`\n    });\n\n    // Test 4: Duplicate detection\n    console.log('\\n🔍 Test 4: Duplicate Detection');\n    // First import valid events\n    await cleanupTestData();\n    resetRecoveryState();\n    await setupTestIndexedDB('validEvents');\n    await performDataRecovery(); // Import first time\n    \n    // Then try to import duplicates\n    await setupTestIndexedDB('duplicateEvents');\n    const test4Result = await performDataRecovery();\n    results.push({\n      scenario: 'Duplicate Detection',\n      success: test4Result.duplicatesSkipped > 0,\n      imported: test4Result.migratedCount,\n      duplicates: test4Result.duplicatesSkipped,\n      errors: test4Result.errors.length,\n      details: `Duplicates properly detected and skipped`\n    });\n\n    // Test 5: Empty state\n    console.log('\\n🗂️ Test 5: Empty State');\n    await cleanupTestData();\n    resetRecoveryState();\n    \n    const test5Result = await performDataRecovery();\n    results.push({\n      scenario: 'Empty State',\n      success: test5Result.migratedCount === 0 && test5Result.success,\n      imported: test5Result.migratedCount,\n      duplicates: test5Result.duplicatesSkipped,\n      errors: test5Result.errors.length,\n      details: `No data found, handled gracefully`\n    });\n\n    console.log('\\n📊 Test Results Summary:');\n    results.forEach(result => {\n      const status = result.success ? '✅' : '❌';\n      console.log(`${status} ${result.scenario}: ${result.details}`);\n      console.log(`   Imported: ${result.imported}, Duplicates: ${result.duplicates}, Errors: ${result.errors}`);\n    });\n\n    const allTestsPassed = results.every(r => r.success);\n    console.log(`\\n🎯 Overall Test Result: ${allTestsPassed ? '✅ ALL TESTS PASSED' : '❌ SOME TESTS FAILED'}`);\n\n    return {\n      success: allTestsPassed,\n      results\n    };\n\n  } catch (error) {\n    console.error('❌ Test suite failed:', error);\n    return {\n      success: false,\n      results: [{\n        scenario: 'Test Suite Error',\n        success: false,\n        imported: 0,\n        duplicates: 0,\n        errors: 1,\n        details: `Test suite failed: ${error}`\n      }]\n    };\n  } finally {\n    // Clean up after tests\n    await cleanupTestData();\n  }\n}\n\n// Expose test functions to window for manual testing\nif (typeof window !== 'undefined') {\n  (window as any).testDataRecovery = {\n    setupTestIndexedDB,\n    setupTestLocalStorage,\n    cleanupTestData,\n    runRecoveryTest,\n    TEST_SCENARIOS\n  };\n}","size_bytes":9423},"client/src/components/SpanningEventCard.tsx":{"content":"import { Event, EventType } from '@shared/schema';\nimport { cn } from '@/lib/utils';\nimport { format, eachDayOfInterval, parseISO } from 'date-fns';\n\ninterface SpanningEventCardProps {\n  event: Event;\n  onClick?: (event: Event) => void;\n  startDate: Date;\n  endDate: Date;\n  weekDays: Date[]; // The days of the current week being rendered\n  viewerMode?: boolean;\n}\n\nconst eventTypeColors: Record<EventType, string> = {\n  PLANNING: 'bg-[#2563eb]',\n  MEETING: 'bg-[#dc2626]',\n  MONTHLY_REVIEW: 'bg-[#000000]',\n  HOLIDAYS: 'bg-[#FF9000]',\n  QBR: 'bg-[#ec4899]',\n};\n\nexport function SpanningEventCard({ \n  event, \n  onClick, \n  startDate, \n  endDate, \n  weekDays,\n  viewerMode = false \n}: SpanningEventCardProps) {\n  \n  // Find which days in the current week this event spans\n  const eventDays = eachDayOfInterval({ start: startDate, end: endDate });\n  const weekEventDays = weekDays.filter(weekDay => \n    eventDays.some(eventDay => \n      format(eventDay, 'yyyy-MM-dd') === format(weekDay, 'yyyy-MM-dd')\n    )\n  );\n\n  if (weekEventDays.length === 0) return null;\n\n  // Calculate position and width\n  const startIndex = weekDays.findIndex(day => \n    format(day, 'yyyy-MM-dd') === format(weekEventDays[0], 'yyyy-MM-dd')\n  );\n  const spanDays = weekEventDays.length;\n  \n  // Position from left (20% per day in 5-day week)\n  const leftPercent = (startIndex * 20);\n  const widthPercent = (spanDays * 20) - 0.5; // Small gap between days\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    onClick?.(event);\n  };\n\n  return (\n    <div\n      className={cn(\n        'absolute h-5 rounded text-xs font-medium text-white cursor-pointer hover:shadow-sm transition-all duration-200 z-10 flex items-center px-2',\n        eventTypeColors[event.type]\n      )}\n      style={{\n        left: `${leftPercent}%`,\n        width: `${widthPercent}%`,\n        top: '24px', // Position below the date number\n      }}\n      onClick={handleClick}\n      data-testid={`spanning-event-${event.id}`}\n    >\n      <span className=\"truncate text-xs\">{event.title}</span>\n    </div>\n  );\n}","size_bytes":2080}},"version":1}